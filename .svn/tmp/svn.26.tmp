package repository.module


import java.sql.Date
import java.util

import com.google.inject.Inject
import constants.{CategoryConstants, MapperConstants, ModeOfHoldingConstants, SchemePlan}
import models.enumerations.{AssetClassEnum, OrderStateEnum}
import models.integration.enumerations.BuySellEnum
import models._
import play.api.db.slick.{DatabaseConfigProvider, HasDatabaseConfigProvider}
import repository.tables.{FcdsdRepo, FcomtRepo, FcsotRepo}
import slick.jdbc.JdbcProfile
import slick.jdbc.{GetResult, PositionedParameters, SQLActionBuilder, SetParameter}
import utils.DateTimeUtils
import data.model.Tables.{Fcdam, Fcdsa, Fcdsd, FcdsdRow, Fcfhs, Fcfomt, Fcuft}
import helpers.SchemeHelper
import data.model.Tables.{Fcdam, Fcdsa, Fcdsd, FcdsdRow, Fcfhs, Fcfomt, Fcuft}
import models.integration.enumerations.BuySellEnum.BuySellEnum
import org.slf4j.LoggerFactory

import scala.collection.mutable.{HashMap, ListBuffer}
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.Future

/**
  * Created by fincash on 25-01-2017.
  */
class FolioRepository @Inject()(protected val dbConfigProvider: DatabaseConfigProvider, fcdsdRepo: FcdsdRepo,
                                schemeHelper: SchemeHelper, fcomtRepo: FcomtRepo, fcsotRepo: FcsotRepo)
  extends HasDatabaseConfigProvider[JdbcProfile] with CategoryConstants with MapperConstants {

  val logger, log = LoggerFactory.getLogger(classOf[FolioRepository])

  import profile.api._
  import SlickKit._

  //Gets Folio no based on the maximum count of schemes in that folio
  def getAMCFolioNo(userPk: Long, amctrfnum: Long): Future[Option[String]] = {

    val query = sql"""SELECT
              folioDetail.FOMTFOLIONO, COUNT(*) AS SCHEMECOUNT
          FROM
              FCFHT,
              (SELECT
                  FOMTFOLIONO, FOMTRFNUM
              FROM
                  FCFOMT
              WHERE
                  FOMTAMCTRFNUM = ${amctrfnum}
                      AND FOMTRFNUM IN (SELECT
                          UFTFOMTRFNUM
                      FROM
                          FCUFT
                      WHERE
                          UFTUBDRFNUM = ${userPk})) folioDetail
          WHERE
              folioDetail.FOMTRFNUM = FHTFOMTRFNUM
          GROUP BY FHTFOMTRFNUM""".as[(String, Long)]

    db.run(query).map(values => {
      if (values.isEmpty) {
        None
      } else {
        Some(values.head._1)
      }
    })
  }

  def getFundDetails(userPk: Long): Future[ListBuffer[FundDetails]] = {

    val liquidId = LIQUID_ID
    val elssId = ELSS_ID
    val query =
      sql"""SELECT
    smtFolioDetails.FHSSOPTRFNUM,
    smtFolioDetails.FOMTFOLIONO,
    smtFolioDetails.SOPTLEGALNAME,
    smtFolioDetails.SOPTSCHEMEPLAN,
    smtFolioDetails.AMCTDISPLAYNAME,
    ctmtPr.catName,
    ctmtPr.parentId,
    smtFolioDetails.FHSDESCRIPTION,
    smtFolioDetails.FHSTRADEDATE,
    smtFolioDetails.FHSTYPE,
    smtFolioDetails.FHSUNITS,
    smtFolioDetails.FHSPRICE,
    smtFolioDetails.FHSAMOUNT,
    smtFolioDetails.FOMTRFNUM,
    smtFolioDetails.FOMTMODEOFHOLDING,
    smtFolioDetails.SMTDISPLAYNAME,
    smtFolioDetails.SOPTDIVIDENDFRQN,
    smtFolioDetails.SOPTDIVIOPTIONTYPE
FROM
    (SELECT
        soptFolioDetails.FHSSOPTRFNUM,
            smt.SMTCTMTRFNUM,
            smt.SMTDISPLAYNAME,
            soptFolioDetails.FOMTFOLIONO,
            soptFolioDetails.SOPTLEGALNAME,
            soptFolioDetails.SOPTSCHEMEPLAN,
            soptFolioDetails.SOPTDIVIDENDFRQN,
            soptFolioDetails.SOPTDIVIOPTIONTYPE,
            soptFolioDetails.AMCTDISPLAYNAME,
            soptFolioDetails.FHSDESCRIPTION,
            soptFolioDetails.FHSTRADEDATE,
            soptFolioDetails.FHSTYPE,
            soptFolioDetails.FHSUNITS,
            soptFolioDetails.FHSPRICE,
            soptFolioDetails.FHSAMOUNT,
            soptFolioDetails.FOMTRFNUM,
            soptFolioDetails.FOMTMODEOFHOLDING
    FROM
        FCSMT smt, (SELECT
        sopt.SOPTSMTRFNUM,
            folioDetails.FHSSOPTRFNUM,
            folioDetails.FOMTFOLIONO,
            sopt.SOPTLEGALNAME,
            sopt.SOPTSCHEMEPLAN,
            sopt.SOPTDIVIDENDFRQN,
            sopt.SOPTDIVIOPTIONTYPE,
            folioDetails.AMCTDISPLAYNAME,
            folioDetails.FHSDESCRIPTION,
            folioDetails.FHSTRADEDATE,
            folioDetails.FHSTYPE,
            folioDetails.FHSUNITS,
            folioDetails.FHSPRICE,
            folioDetails.FHSAMOUNT,
            folioDetails.FOMTRFNUM,
            folioDetails.FOMTMODEOFHOLDING
    FROM
        FCSOPT sopt, (SELECT
        fhs.FHSSOPTRFNUM,
            fomtfhc.FOMTFOLIONO,
            fomtfhc.AMCTDISPLAYNAME,
            fhs.FHSDESCRIPTION,
            fhs.FHSTRADEDATE,
            fhs.FHSTYPE,
            fhs.FHSUNITS,
            fhs.FHSPRICE,
            fhs.FHSAMOUNT,
            fomtfhc.FOMTRFNUM,
            fomtfhc.FOMTMODEOFHOLDING
    FROM
        FCFHS fhs, (SELECT
        fht.FHTRFNUM,
            fomtamc.FOMTFOLIONO,
            fomtamc.FOMTRFNUM,
            fomtamc.AMCTDISPLAYNAME,
            fomtamc.FOMTMODEOFHOLDING
    FROM
        FCFHT fht, (SELECT
        fomtResult.FOMTFOLIONO,
            fomtResult.FOMTRFNUM,
            amct.AMCTDISPLAYNAME,
            fomtResult.FOMTMODEOFHOLDING
    FROM
        FCAMCT amct, (SELECT
        fomt.FOMTFOLIONO,
            fomt.FOMTRFNUM,
            fomt.FOMTAMCTRFNUM,
            fomt.FOMTMODEOFHOLDING
    FROM
        FCFOMT fomt
    WHERE
        fomt.FOMTRFNUM IN (SELECT
                UFTFOMTRFNUM
            FROM
                FCUFT
            WHERE
                UFTUBDRFNUM = ${userPk})) fomtResult
    WHERE
        amct.AMCTRFNUM = fomtResult.FOMTAMCTRFNUM) fomtamc
    WHERE
        fht.FHTFOMTRFNUM = fomtamc.FOMTRFNUM) fomtfhc
    WHERE
        fhs.FHSFHTRFNUM = fomtfhc.FHTRFNUM
    ORDER BY fhs.FHSSOPTRFNUM , fhs.FHSTRADEDATE) folioDetails
    WHERE
        sopt.SOPTRFNUM = folioDetails.FHSSOPTRFNUM) soptFolioDetails
    WHERE
        soptFolioDetails.SOPTSMTRFNUM = smt.SMTRFNUM) smtFolioDetails,
    (SELECT
        ch.CTMTRFNUM AS childId,
            pr.CTMTRFNUM AS parentId,
            CASE
                WHEN ch.CTMTRFNUM = ${liquidId}|| ch.CTMTRFNUM = ${elssId} THEN ch.CTMTNAME
                ELSE pr.CTMTNAME
            END AS catName
    FROM
        FCCTMT pr, FCCTMT ch
    WHERE
        pr.CTMTRFNUM = ch.CTMTCTMTRFNUM) ctmtPr
WHERE
    ctmtPr.childId = smtFolioDetails.SMTCTMTRFNUM"""

    getFundDetailsResult(query)
  }

  def getHoldingFundDetails(userPk: Long): Future[ListBuffer[HoldingFund]] = {
    val query =
      sql"""SELECT fht.FHTSOPTRFNUM,
            folioMaster.FOMTFOLIONO,
		        folioMaster.FOMTMODEOFHOLDING,
            fht.FHTHOLDINGUNITS FROM FCFHT fht,

(SELECT
                      fomt.FOMTFOLIONO,
                          fomt.FOMTRFNUM,
                          fomt.FOMTMODEOFHOLDING
                  FROM
                      FCFOMT fomt
                  WHERE
                      fomt.FOMTRFNUM IN (SELECT
                              UFTFOMTRFNUM
                          FROM
                              FCUFT
                          WHERE
                              UFTUBDRFNUM = ${userPk})) folioMaster
                              WHERE fht.FHTFOMTRFNUM = folioMaster.fomtrfnum AND fht.FHTHOLDINGUNITS != 0.0;"""

    val holdingFundList: ListBuffer[HoldingFund] = ListBuffer[HoldingFund]()
    db.run(query.as[(Long, String, String, BigDecimal)]).map { values => {
      values.foreach { value => {
        val holdingFund = HoldingFund(value._1, value._2, value._3, value._4)
        holdingFundList.+=(holdingFund)
      }}
      holdingFundList
    }}
  }

  private def getRedemptionFundDetailsResult(sqlActionBuilder: SQLActionBuilder) = {
    val query = sqlActionBuilder.as[(Long, String, String, BigDecimal)]
    val holdingFundList: ListBuffer[HoldingFund] = ListBuffer[HoldingFund]()

    db.run(query).map { values => {
      values.foreach { value => {
        val holdingFund = HoldingFund(value._1, value._2, value._3, value._4)
        holdingFundList.+=(holdingFund)
      }}
    }}
  }

  def getPortfolioDetails(userPk: Long): Future[ListBuffer[FundDetails]] = {

    val equityId = EQUITY_ID
    val debtId = DEBT_HYBRID
    val liquidId = LIQUID_ID
    val elssId = ELSS_ID
    val debtHybridId = DEBT_HYBRID
    val equityHybridId = EQUITY_HYBRID
    val query =
      sql"""SELECT
    smtFolioDetails.FHSSOPTRFNUM,
    smtFolioDetails.FOMTFOLIONO,
    smtFolioDetails.SOPTLEGALNAME,
    smtFolioDetails.SOPTSCHEMEPLAN,
    smtFolioDetails.AMCTDISPLAYNAME,
    ctmtPr.catName,
    ctmtPr.parentId,
    smtFolioDetails.FHSDESCRIPTION,
    smtFolioDetails.FHSTRADEDATE,
    smtFolioDetails.FHSTYPE,
    smtFolioDetails.FHSUNITS,
    smtFolioDetails.FHSPRICE,
    smtFolioDetails.FHSAMOUNT,
    smtFolioDetails.FOMTRFNUM,
    smtFolioDetails.FOMTMODEOFHOLDING,
    smtFolioDetails.SMTDISPLAYNAME,
    smtFolioDetails.SOPTDIVIDENDFRQN,
    smtFolioDetails.SOPTDIVIOPTIONTYPE
FROM
    (SELECT
        soptFolioDetails.FHSSOPTRFNUM,
            smt.SMTCTMTRFNUM,
            smt.SMTDISPLAYNAME,
            soptFolioDetails.FOMTFOLIONO,
            soptFolioDetails.SOPTLEGALNAME,
            soptFolioDetails.SOPTSCHEMEPLAN,
            soptFolioDetails.SOPTDIVIDENDFRQN,
            soptFolioDetails.SOPTDIVIOPTIONTYPE,
            soptFolioDetails.AMCTDISPLAYNAME,
            soptFolioDetails.FHSDESCRIPTION,
            soptFolioDetails.FHSTRADEDATE,
            soptFolioDetails.FHSTYPE,
            soptFolioDetails.FHSUNITS,
            soptFolioDetails.FHSPRICE,
            soptFolioDetails.FHSAMOUNT,
            soptFolioDetails.FOMTRFNUM,
            soptFolioDetails.FOMTMODEOFHOLDING
    FROM
        FCSMT smt, (SELECT
        sopt.SOPTSMTRFNUM,
            folioDetails.FHSSOPTRFNUM,
            folioDetails.FOMTFOLIONO,
            sopt.SOPTLEGALNAME,
            sopt.SOPTSCHEMEPLAN,
            sopt.SOPTDIVIDENDFRQN,
            sopt.SOPTDIVIOPTIONTYPE,
            folioDetails.AMCTDISPLAYNAME,
            folioDetails.FHSDESCRIPTION,
            folioDetails.FHSTRADEDATE,
            folioDetails.FHSTYPE,
            folioDetails.FHSUNITS,
            folioDetails.FHSPRICE,
            folioDetails.FHSAMOUNT,
            folioDetails.FOMTRFNUM,
            folioDetails.FOMTMODEOFHOLDING
    FROM
        FCSOPT sopt, (SELECT
        fhs.FHSSOPTRFNUM,
            fomtfhc.FOMTFOLIONO,
            fomtfhc.AMCTDISPLAYNAME,
            fhs.FHSDESCRIPTION,
            fhs.FHSTRADEDATE,
            fhs.FHSTYPE,
            fhs.FHSUNITS,
            fhs.FHSPRICE,
            fhs.FHSAMOUNT,
            fomtfhc.FOMTRFNUM,
            fomtfhc.FOMTMODEOFHOLDING
    FROM
        FCFHS fhs, (SELECT
        fht.FHTRFNUM,
            fomtamc.FOMTFOLIONO,
            fomtamc.FOMTRFNUM,
            fomtamc.AMCTDISPLAYNAME,
            fomtamc.FOMTMODEOFHOLDING
    FROM
        FCFHT fht, (SELECT
        fomtResult.FOMTFOLIONO,
            fomtResult.FOMTRFNUM,
            amct.AMCTDISPLAYNAME,
            fomtResult.FOMTMODEOFHOLDING
    FROM
        FCAMCT amct, (SELECT
        fomt.FOMTFOLIONO,
            fomt.FOMTRFNUM,
            fomt.FOMTAMCTRFNUM,
            fomt.FOMTMODEOFHOLDING
    FROM
        FCFOMT fomt
    WHERE
        fomt.FOMTRFNUM IN (SELECT
                UFTFOMTRFNUM
            FROM
                FCUFT
            WHERE
                UFTUBDRFNUM = ${userPk})) fomtResult
    WHERE
        amct.AMCTRFNUM = fomtResult.FOMTAMCTRFNUM) fomtamc
    WHERE
        fht.FHTFOMTRFNUM = fomtamc.FOMTRFNUM) fomtfhc
    WHERE
        fhs.FHSFHTRFNUM = fomtfhc.FHTRFNUM
    ORDER BY fhs.FHSSOPTRFNUM , fhs.FHSTRADEDATE) folioDetails
    WHERE
        sopt.SOPTRFNUM = folioDetails.FHSSOPTRFNUM) soptFolioDetails
    WHERE
        soptFolioDetails.SOPTSMTRFNUM = smt.SMTRFNUM) smtFolioDetails,
    (SELECT
        ch.CTMTRFNUM AS childId,
            CASE
                WHEN ch.CTMTRFNUM = ${debtHybridId} THEN ${debtId}
                WHEN ch.CTMTRFNUM = ${equityHybridId} THEN ${equityId}
                ELSE pr.CTMTRFNUM
            END AS parentId,
            CASE
                WHEN ch.CTMTRFNUM = ${debtHybridId} THEN 'Debt'
                WHEN ch.CTMTRFNUM = ${equityHybridId} THEN 'Equity'
                WHEN ch.CTMTRFNUM = ${liquidId}|| ch.CTMTRFNUM = ${elssId} THEN ch.CTMTNAME
                ELSE pr.CTMTNAME
            END AS catName
    FROM
        FCCTMT pr, FCCTMT ch
    WHERE
        pr.CTMTRFNUM = ch.CTMTCTMTRFNUM) ctmtPr
WHERE
    ctmtPr.childId = smtFolioDetails.SMTCTMTRFNUM"""

    getFundDetailsResult(query)
  }

  def getNetUnitsBeforeDate(fundId: Long, folioId: Long, date: java.util.Date): Future[BigDecimal] = {

    val transactionList: ListBuffer[(BuySellEnum, BigDecimal)] = ListBuffer[(BuySellEnum, BigDecimal)]()
    val transactionDate = DateTimeUtils.convertDateToYYYYMMDD(date)
    val query = sql"""SELECT
    fhs.FHSTYPE, fhs.FHSUNITS
FROM
    FCFHS fhs
WHERE
    fhs.FHSSOPTRFNUM = ${fundId}
        AND FHSFHTRFNUM = (SELECT
            FHTRFNUM
        FROM
            FCFHT
        WHERE
            FHTFOMTRFNUM = ${folioId})
        AND DATE(fhs.FHSTRADEDATE) < DATE(${transactionDate})""".as[(String, BigDecimal)]

    db.run(query).map { values =>
      var netUnits = BigDecimal(0.0)
      values.foreach { value =>
        transactionList.+=((BuySellEnum.withName(value._1), value._2))

        if (BuySellEnum.C == BuySellEnum.withName(value._1)) {
          netUnits += value._2
        } else {
          netUnits += value._2
        }
      }
      netUnits
    }
  }

  def getFundCurrNAV(fundDetailList: ListBuffer[FundDetails]): Future[ListBuffer[FundDetails]] = {

    var fundIdList: List[Long] = List[Long]()
    for (fund <- fundDetailList) {
      fundIdList = fund.fundId :: fundIdList
    }
    val query = for {
      damObj <- Fcdam.filter(_.damname === MSTAR_DATASOURCE).result
      dsarfnumList <- Fcdsa.filter(x => x.dsadamrfnum === damObj.head.id && (x.dsasoptrfnum inSetBind (fundIdList))).sortBy(_.dsasoptrfnum).map(_.id).result
      dsdObj <- Fcdsd.filter(x => (x.dsddsarfnum inSetBind (dsarfnumList))).sortBy(_.dsddsarfnum).map(x => (x.dsdnav, x.dsdnavasofdate)).result
    } yield (dsdObj)

    db.run(query).map { values =>
      values.zipWithIndex.foreach { value =>
        val index = value._2
        val fund: FundDetails = fundDetailList(index)
        fundDetailList(index) = fund.copy(currNav = BigDecimal(value._1._1.toDouble), navDate = value._1._2)
      }

      fundDetailList
    }
  }

  def getCurrNavByFundId(fundId: Long): Future[(Double, util.Date)] = {
    val query = for {
    //dsarow <- Fcdsa.filter(x => x.dsasoptrfnum === fundId && x.dsadamrfnum === MSTAR_DATASOURCE_ID).result
      dsdrow <- Fcdsd.filter(x => x.dsddsarfnum in Fcdsa.filter(x => x.dsasoptrfnum === fundId && x.dsadamrfnum === MSTAR_DATASOURCE_ID).map(_.id)).result
    } yield (dsdrow)
    db.run(query.transactionally).map(value => {
      if (value.nonEmpty) {
        val nav = value.head.dsdnav.toDouble
        val navDateOption = value.head.dsdnavasofdate
        var date = DateTimeUtils.getCurrentDate()
        if (navDateOption.nonEmpty) {
          val date = navDateOption.get
        }
        (nav, date)
      }
      else {
        (0.0, DateTimeUtils.getCurrentDate())
      }
    }).recover {
      case ex: Exception =>
        logger.error(ex.getMessage + "Can't get current NAV")
        throw ex
    }
  }

  def getTransactionFundDetails(userPk: Long, transactionFilter: TransactionFilter): Future[ListBuffer[FundDetails]] = {
    val fundId = transactionFilter.fundId
    val transactionType = transactionFilter.transType
    val liquidId = LIQUID_ID
    val elssId = ELSS_ID

    var sqlQuery =
      sql"""SELECT
    smtFolioDetails.FHSSOPTRFNUM,
    smtFolioDetails.FOMTFOLIONO,
    smtFolioDetails.SOPTLEGALNAME,
    smtFolioDetails.SOPTSCHEMEPLAN,
    smtFolioDetails.AMCTDISPLAYNAME,
    ctmtPr.catName,
    ctmtPr.parentId,
    smtFolioDetails.FHSDESCRIPTION,
    smtFolioDetails.FHSTRADEDATE,
    smtFolioDetails.FHSTYPE,
    smtFolioDetails.FHSUNITS,
    smtFolioDetails.FHSPRICE,
    smtFolioDetails.FHSAMOUNT,
    smtFolioDetails.FOMTRFNUM,
    smtFolioDetails.FOMTMODEOFHOLDING,
    smtFolioDetails.SMTDISPLAYNAME,
    smtFolioDetails.SOPTDIVIDENDFRQN,
    smtFolioDetails.SOPTDIVIOPTIONTYPE
FROM
    (SELECT
        soptFolioDetails.FHSSOPTRFNUM,
            smt.SMTCTMTRFNUM,
            smt.SMTDISPLAYNAME,
            soptFolioDetails.FOMTFOLIONO,
            soptFolioDetails.SOPTLEGALNAME,
            soptFolioDetails.SOPTSCHEMEPLAN,
            soptFolioDetails.SOPTDIVIDENDFRQN,
            soptFolioDetails.SOPTDIVIOPTIONTYPE,
            soptFolioDetails.AMCTDISPLAYNAME,
            soptFolioDetails.FHSDESCRIPTION,
            soptFolioDetails.FHSTRADEDATE,
            soptFolioDetails.FHSTYPE,
            soptFolioDetails.FHSUNITS,
            soptFolioDetails.FHSPRICE,
            soptFolioDetails.FHSAMOUNT,
            soptFolioDetails.FOMTRFNUM,
            soptFolioDetails.FOMTMODEOFHOLDING
    FROM
        FCSMT smt, (SELECT
        sopt.SOPTSMTRFNUM,
            folioDetails.FHSSOPTRFNUM,
            folioDetails.FOMTFOLIONO,
            sopt.SOPTLEGALNAME,
            sopt.SOPTSCHEMEPLAN,
            sopt.SOPTDIVIDENDFRQN,
            sopt.SOPTDIVIOPTIONTYPE,
            folioDetails.AMCTDISPLAYNAME,
            folioDetails.FHSDESCRIPTION,
            folioDetails.FHSTRADEDATE,
            folioDetails.FHSTYPE,
            folioDetails.FHSUNITS,
            folioDetails.FHSPRICE,
            folioDetails.FHSAMOUNT,
            folioDetails.FOMTRFNUM,
            folioDetails.FOMTMODEOFHOLDING
    FROM
        FCSOPT sopt, (SELECT
        fhs.FHSSOPTRFNUM,
            fomtfhc.FOMTFOLIONO,
            fomtfhc.AMCTDISPLAYNAME,
            fhs.FHSDESCRIPTION,
            fhs.FHSTRADEDATE,
            fhs.FHSTYPE,
            fhs.FHSUNITS,
            fhs.FHSPRICE,
            fhs.FHSAMOUNT,
            fomtfhc.FOMTRFNUM,
            fomtfhc.FOMTMODEOFHOLDING
    FROM
        FCFHS fhs, (SELECT
        fht.FHTRFNUM,
            fomtamc.FOMTFOLIONO,
            fomtamc.FOMTRFNUM,
            fomtamc.AMCTDISPLAYNAME,
            fomtamc.FOMTMODEOFHOLDING
    FROM
        FCFHT fht, (SELECT
        fomtResult.FOMTFOLIONO,
            fomtResult.FOMTRFNUM,
            amct.AMCTDISPLAYNAME,
            fomtResult.FOMTMODEOFHOLDING
    FROM
        FCAMCT amct, (SELECT
        fomt.FOMTFOLIONO,
            fomt.FOMTRFNUM,
            fomt.FOMTAMCTRFNUM,
            fomt.FOMTMODEOFHOLDING
    FROM
        FCFOMT fomt
    WHERE
        fomt.FOMTRFNUM IN (SELECT
                UFTFOMTRFNUM
            FROM
                FCUFT
            WHERE
                UFTUBDRFNUM = ${userPk})) fomtResult
    WHERE
        amct.AMCTRFNUM = fomtResult.FOMTAMCTRFNUM) fomtamc
    WHERE
        fht.FHTFOMTRFNUM = fomtamc.FOMTRFNUM) fomtfhc
    WHERE
        fhs.FHSFHTRFNUM = fomtfhc.FHTRFNUM """

    if (!transactionFilter.startDate.isEmpty && !transactionFilter.endDate.isEmpty) {
      val startDate = DateTimeUtils.convertDateToYYYYMMDD(transactionFilter.startDate.get)
      val endDate = DateTimeUtils.convertDateToYYYYMMDD(transactionFilter.endDate.get)

      val dateFilter = sql"""AND date(fhs.FHSTRADEDATE) >= ${startDate} AND date(fhs.FHSTRADEDATE) <= ${endDate} """
      sqlQuery = sqlQuery concat dateFilter
    }

    if (!fundId.isEmpty && fundId.get != 0L) {
      val id = fundId.get
      val filterQuery = sql""" AND fhs.FHSSOPTRFNUM = ${id} """
      sqlQuery = sqlQuery concat filterQuery
    }
    if (!transactionType.isEmpty && transactionType.get != "") {
      val transType = transactionType.get
      val filterQuery = sql""" AND fhs.FHSTYPE = ${transType} """
      sqlQuery = sqlQuery concat filterQuery
    }
    val query1 =
      sql"""ORDER BY fhs.FHSSOPTRFNUM , fhs.FHSTRADEDATE) folioDetails
    WHERE
        sopt.SOPTRFNUM = folioDetails.FHSSOPTRFNUM) soptFolioDetails
    WHERE
        soptFolioDetails.SOPTSMTRFNUM = smt.SMTRFNUM) smtFolioDetails,
    (SELECT
        ch.CTMTRFNUM AS childId,
            pr.CTMTRFNUM AS parentId,
            CASE
                WHEN ch.CTMTRFNUM = ${liquidId}|| ch.CTMTRFNUM = ${elssId} THEN ch.CTMTNAME
                ELSE pr.CTMTNAME
            END AS catName
    FROM
        FCCTMT pr, FCCTMT ch
    WHERE
        pr.CTMTRFNUM = ch.CTMTCTMTRFNUM) ctmtPr
WHERE
    ctmtPr.childId = smtFolioDetails.SMTCTMTRFNUM"""
    sqlQuery = sqlQuery concat query1

    getFundDetailsResult(sqlQuery)

  }

  private def getFundDetailsResult(sQLActionBuilder: SQLActionBuilder): Future[ListBuffer[FundDetails]] = {

    implicit val getTransactionSummary = GetResult(r => ReportModel(r.nextLong, r.nextString, r.nextString, r.nextString,
      r.nextString, r.nextString, r.nextLong, r.nextString, r.nextDate, r.nextString, r.nextBigDecimal, r.nextBigDecimal, r.nextBigDecimal,
      r.nextLong, r.nextString, r.nextString, r.nextString, r.nextString));

    val query = sQLActionBuilder.as[ReportModel]
    val fundMap = HashMap.empty[Long, Boolean]
    val fundDetailList: ListBuffer[FundDetails] = ListBuffer[FundDetails]()

    db.run(query).map { values => {
      values.foreach { reportModel =>
        val fundId = reportModel.fundId
        if (fundMap.contains(fundId)) {

          val transactionList = fundDetailList(fundDetailList.size - 1).transactionList
          transactionList.+=(FundTransaction(reportModel.desc, reportModel.tradeDate, BuySellEnum.withName(reportModel.transType), reportModel.units, reportModel.price, Some(reportModel.amount)))
          fundDetailList(fundDetailList.size - 1) = fundDetailList(fundDetailList.size - 1).copy(transactionList = transactionList)
        } else {
          fundMap.+=(fundId -> true)
          val fundTransactionList: ListBuffer[FundTransaction] = ListBuffer[FundTransaction]()
          fundTransactionList.+=(FundTransaction(reportModel.desc, reportModel.tradeDate, BuySellEnum.withName(reportModel.transType), reportModel.units, reportModel.price, Some(reportModel.amount)))
          val schemePlan = schemeHelper.getSchemePlan(reportModel.schemePlan)
          val divFreq = schemeHelper.getDivFrequency(reportModel.divFreq)
          val dividendOption = schemeHelper.getDivOption(reportModel.divOption)
          val fundBasicDetails = FundBasicDetails(reportModel.folioNo, reportModel.schemeDisplayName, ModeOfHoldingConstants.MODE_OF_HOLDING_MAP.getOrElse(reportModel.modeOfHolding, ""), schemePlan, divFreq, dividendOption, SchemePlan.SCHEME_PLAN_MAP.get(reportModel.schemePlan))
          val fundDetail = FundDetails(fundId, fundBasicDetails, reportModel.amcName, AssetClassEnum.withName(reportModel.category), reportModel.categoryId, 0, None, fundTransactionList)
          fundDetailList.+=(fundDetail.copy(folioId = Some(reportModel.folioId)))
        }
      }
      fundDetailList
    }
    }
  }

  def getCapitalGainFundDetails(userPk: Long, startDate: util.Date, endDate: util.Date): Future[ListBuffer[FundDetails]] = {

    val startDateString = DateTimeUtils.convertDateToYYYYMMDD(startDate)
    val endDateString = DateTimeUtils.convertDateToYYYYMMDD(endDate)
    val debtHybridId = DEBT_HYBRID
    val equityHybridId = EQUITY_HYBRID
    val query =
      sql"""SELECT
    smtFolioDetails.FHSSOPTRFNUM,
    smtFolioDetails.FOMTFOLIONO,
    smtFolioDetails.SOPTLEGALNAME,
    smtFolioDetails.SOPTSCHEMEPLAN,
    smtFolioDetails.AMCTDISPLAYNAME,
    ctmtPr.catName,
    ctmtPr.parentId,
    smtFolioDetails.FHSDESCRIPTION,
    smtFolioDetails.FHSTRADEDATE,
    smtFolioDetails.FHSTYPE,
    smtFolioDetails.FHSUNITS,
    smtFolioDetails.FHSPRICE,
    smtFolioDetails.FHSAMOUNT,
    smtFolioDetails.FOMTRFNUM,
    smtFolioDetails.FOMTMODEOFHOLDING,
    smtFolioDetails.SMTDISPLAYNAME,
    smtFolioDetails.SOPTDIVIDENDFRQN,
    smtFolioDetails.SOPTDIVIOPTIONTYPE
FROM
    (SELECT
        soptFolioDetails.FHSSOPTRFNUM,
            smt.SMTCTMTRFNUM,
            smt.SMTDISPLAYNAME,
            soptFolioDetails.FOMTFOLIONO,
            soptFolioDetails.SOPTLEGALNAME,
            soptFolioDetails.SOPTSCHEMEPLAN,
            soptFolioDetails.SOPTDIVIDENDFRQN,
            soptFolioDetails.SOPTDIVIOPTIONTYPE,
            soptFolioDetails.AMCTDISPLAYNAME,
            soptFolioDetails.FHSDESCRIPTION,
            soptFolioDetails.FHSTRADEDATE,
            soptFolioDetails.FHSTYPE,
            soptFolioDetails.FHSUNITS,
            soptFolioDetails.FHSPRICE,
            soptFolioDetails.FHSAMOUNT,
            soptFolioDetails.FOMTRFNUM,
            soptFolioDetails.FOMTMODEOFHOLDING
    FROM
        FCSMT smt, (SELECT
        sopt.SOPTSMTRFNUM,
            folioDetails.FHSSOPTRFNUM,
            folioDetails.FOMTFOLIONO,
            sopt.SOPTLEGALNAME,
            sopt.SOPTSCHEMEPLAN,
            sopt.SOPTDIVIDENDFRQN,
            sopt.SOPTDIVIOPTIONTYPE,
            folioDetails.AMCTDISPLAYNAME,
            folioDetails.FHSDESCRIPTION,
            folioDetails.FHSTRADEDATE,
            folioDetails.FHSTYPE,
            folioDetails.FHSUNITS,
            folioDetails.FHSPRICE,
            folioDetails.FHSAMOUNT,
            folioDetails.FOMTRFNUM,
            folioDetails.FOMTMODEOFHOLDING
    FROM
        FCSOPT sopt, (SELECT
        fhs.FHSSOPTRFNUM,
            fomtfhc.FOMTFOLIONO,
            fomtfhc.AMCTDISPLAYNAME,
            fhs.FHSDESCRIPTION,
            fhs.FHSTRADEDATE,
            fhs.FHSTYPE,
            fhs.FHSUNITS,
            fhs.FHSPRICE,
            fhs.FHSAMOUNT,
            fomtfhc.FOMTRFNUM,
            fomtfhc.FOMTMODEOFHOLDING
    FROM
        FCFHS fhs, (SELECT
        fht.FHTRFNUM,
            fomtamc.FOMTFOLIONO,
            fomtamc.FOMTRFNUM,
            fomtamc.AMCTDISPLAYNAME,
            fomtamc.FOMTMODEOFHOLDING
    FROM
        FCFHT fht, (SELECT
        fomtResult.FOMTFOLIONO,
            fomtResult.FOMTRFNUM,
            amct.AMCTDISPLAYNAME,
            fomtResult.FOMTMODEOFHOLDING
    FROM
        FCAMCT amct, (SELECT
        fomt.FOMTFOLIONO,
            fomt.FOMTRFNUM,
            fomt.FOMTAMCTRFNUM,
            fomt.FOMTMODEOFHOLDING
    FROM
        FCFOMT fomt
    WHERE
        fomt.FOMTRFNUM IN (SELECT
                UFTFOMTRFNUM
            FROM
                FCUFT
            WHERE
                UFTUBDRFNUM = ${userPk})) fomtResult
    WHERE
        amct.AMCTRFNUM = fomtResult.FOMTAMCTRFNUM) fomtamc
    WHERE
        fht.FHTFOMTRFNUM = fomtamc.FOMTRFNUM) fomtfhc
    WHERE
        fhs.FHSFHTRFNUM = fomtfhc.FHTRFNUM
	AND date(fhs.FHSTRADEDATE) >= ${startDateString} AND date(fhs.FHSTRADEDATE) <= ${endDateString}
    ORDER BY fhs.FHSSOPTRFNUM , fhs.FHSTRADEDATE) folioDetails
    WHERE
        sopt.SOPTRFNUM = folioDetails.FHSSOPTRFNUM) soptFolioDetails
    WHERE
        soptFolioDetails.SOPTSMTRFNUM = smt.SMTRFNUM) smtFolioDetails,
    (SELECT
        ch.CTMTRFNUM AS childId,
            pr.CTMTRFNUM AS parentId,
            CASE
                WHEN ch.CTMTRFNUM = ${debtHybridId}|| ch.CTMTRFNUM = ${equityHybridId} THEN ch.CTMTNAME
                ELSE pr.CTMTNAME
            END AS catName
    FROM
        FCCTMT pr, FCCTMT ch
    WHERE
        pr.CTMTRFNUM = ch.CTMTCTMTRFNUM) ctmtPr
WHERE
    ctmtPr.childId = smtFolioDetails.SMTCTMTRFNUM"""


    getFundDetailsResult(query)

  }

  def getAssetAllocationFundDetails(userPk: Long): Future[ListBuffer[FundDetails]] = {
    val debtHybridId = DEBT_HYBRID
    val equityHybridId = EQUITY_HYBRID
    val equityId = EQUITY_ID
    val hybridId = HYBRID_ID
    val query =
      sql"""SELECT
    smtFolioDetails.FHSSOPTRFNUM,
    smtFolioDetails.FOMTFOLIONO,
    smtFolioDetails.SOPTLEGALNAME,
    smtFolioDetails.SOPTSCHEMEPLAN,
    smtFolioDetails.AMCTDISPLAYNAME,
    ctmtPr.catName,
    ctmtPr.parentId,
    smtFolioDetails.FHSDESCRIPTION,
    smtFolioDetails.FHSTRADEDATE,
    smtFolioDetails.FHSTYPE,
    smtFolioDetails.FHSUNITS,
    smtFolioDetails.FHSPRICE,
    smtFolioDetails.FHSAMOUNT,
    smtFolioDetails.FOMTRFNUM,
    smtFolioDetails.FOMTMODEOFHOLDING,
    smtFolioDetails.SMTDISPLAYNAME,
    smtFolioDetails.SOPTDIVIDENDFRQN,
    smtFolioDetails.SOPTDIVIOPTIONTYPE
FROM
    (SELECT
        soptFolioDetails.FHSSOPTRFNUM,
            smt.SMTCTMTRFNUM,
            smt.SMTDISPLAYNAME,
            soptFolioDetails.FOMTFOLIONO,
            soptFolioDetails.SOPTLEGALNAME,
            soptFolioDetails.SOPTSCHEMEPLAN,
            soptFolioDetails.SOPTDIVIDENDFRQN,
            soptFolioDetails.SOPTDIVIOPTIONTYPE,
            soptFolioDetails.AMCTDISPLAYNAME,
            soptFolioDetails.FHSDESCRIPTION,
            soptFolioDetails.FHSTRADEDATE,
            soptFolioDetails.FHSTYPE,
            soptFolioDetails.FHSUNITS,
            soptFolioDetails.FHSPRICE,
            soptFolioDetails.FHSAMOUNT,
            soptFolioDetails.FOMTRFNUM,
            soptFolioDetails.FOMTMODEOFHOLDING
    FROM
        FCSMT smt, (SELECT
        sopt.SOPTSMTRFNUM,
            folioDetails.FHSSOPTRFNUM,
            folioDetails.FOMTFOLIONO,
            sopt.SOPTLEGALNAME,
            sopt.SOPTSCHEMEPLAN,
            sopt.SOPTDIVIDENDFRQN,
            sopt.SOPTDIVIOPTIONTYPE,
            folioDetails.AMCTDISPLAYNAME,
            folioDetails.FHSDESCRIPTION,
            folioDetails.FHSTRADEDATE,
            folioDetails.FHSTYPE,
            folioDetails.FHSUNITS,
            folioDetails.FHSPRICE,
            folioDetails.FHSAMOUNT,
            folioDetails.FOMTRFNUM,
            folioDetails.FOMTMODEOFHOLDING
    FROM
        FCSOPT sopt, (SELECT
        fhs.FHSSOPTRFNUM,
            fomtfhc.FOMTFOLIONO,
            fomtfhc.AMCTDISPLAYNAME,
            fhs.FHSDESCRIPTION,
            fhs.FHSTRADEDATE,
            fhs.FHSTYPE,
            fhs.FHSUNITS,
            fhs.FHSPRICE,
            fhs.FHSAMOUNT,
            fomtfhc.FOMTRFNUM,
            fomtfhc.FOMTMODEOFHOLDING
    FROM
        FCFHS fhs, (SELECT
        fht.FHTRFNUM,
            fomtamc.FOMTFOLIONO,
            fomtamc.FOMTRFNUM,
            fomtamc.AMCTDISPLAYNAME,
            fomtamc.FOMTMODEOFHOLDING
    FROM
        FCFHT fht, (SELECT
        fomtResult.FOMTFOLIONO,
            fomtResult.FOMTRFNUM,
            amct.AMCTDISPLAYNAME,
            fomtResult.FOMTMODEOFHOLDING
    FROM
        FCAMCT amct, (SELECT
        fomt.FOMTFOLIONO,
            fomt.FOMTRFNUM,
            fomt.FOMTAMCTRFNUM,
            fomt.FOMTMODEOFHOLDING
    FROM
        FCFOMT fomt
    WHERE
        fomt.FOMTRFNUM IN (SELECT
                UFTFOMTRFNUM
            FROM
                FCUFT
            WHERE
                UFTUBDRFNUM = ${userPk})) fomtResult
    WHERE
        amct.AMCTRFNUM = fomtResult.FOMTAMCTRFNUM) fomtamc
    WHERE
        fht.FHTFOMTRFNUM = fomtamc.FOMTRFNUM) fomtfhc
    WHERE
        fhs.FHSFHTRFNUM = fomtfhc.FHTRFNUM
    ORDER BY fhs.FHSSOPTRFNUM , fhs.FHSTRADEDATE) folioDetails
    WHERE
        sopt.SOPTRFNUM = folioDetails.FHSSOPTRFNUM) soptFolioDetails
    WHERE
        soptFolioDetails.SOPTSMTRFNUM = smt.SMTRFNUM) smtFolioDetails,
    (SELECT
        ch.CTMTRFNUM AS childId,
            CASE
                WHEN ch.CTMTRFNUM = ${debtHybridId} THEN ${hybridId}
                WHEN ch.CTMTRFNUM = ${equityHybridId} THEN ${equityId}
                ELSE pr.CTMTRFNUM
            END AS parentId,
            CASE
                WHEN ch.CTMTRFNUM = ${debtHybridId} THEN 'Debt'
                WHEN ch.CTMTRFNUM = ${equityHybridId} THEN 'Equity'
                ELSE pr.CTMTNAME
            END AS catName
    FROM
        FCCTMT pr, FCCTMT ch
    WHERE
        pr.CTMTRFNUM = ch.CTMTCTMTRFNUM) ctmtPr
WHERE
    ctmtPr.childId = smtFolioDetails.SMTCTMTRFNUM"""


    getFundDetailsResult(query)
  }

  def getIRRFundDetails(userPk: Long): Future[ListBuffer[Transaction]] = {

    val fundMap = HashMap.empty[Long, Boolean]
    val transactionsList: ListBuffer[Transaction] = ListBuffer[Transaction]()

    val query = sql"""SELECT
    folioSopt.FHSSOPTRFNUM,
    folioSopt.FOMTFOLIONO,
    folioSopt.SOPTLEGALNAME,
    folioSopt.FHSDESCRIPTION,
    folioSopt.FHSTRADEDATE,
    folioSopt.FHSTYPE,
    folioSopt.FHSUNITS,
    folioSopt.FHSPRICE,
    folioSopt.FHSAMOUNT,
    folioSopt.FOMTRFNUM,
    smt.SMTDISPLAYNAME,
    folioSopt.SOPTSCHEMEPLAN,
    folioSopt.SOPTDIVIDENDFRQN,
    folioSopt.SOPTDIVIOPTIONTYPE
FROM
    FCSMT smt,
    (SELECT
        folioDetails.FHSSOPTRFNUM,
            folioDetails.FOMTFOLIONO,
            sopt.SOPTLEGALNAME,
            sopt.SOPTSCHEMEPLAN,
            sopt.SOPTDIVIDENDFRQN,
            sopt.SOPTDIVIOPTIONTYPE,
            sopt.SOPTSMTRFNUM,
            folioDetails.FHSDESCRIPTION,
            folioDetails.FHSTRADEDATE,
            folioDetails.FHSTYPE,
            folioDetails.FHSUNITS,
            folioDetails.FHSPRICE,
            folioDetails.FHSAMOUNT,
            folioDetails.FOMTRFNUM
    FROM
        FCSOPT sopt, (SELECT
        fhs.FHSSOPTRFNUM,
            fomtfhc.FOMTFOLIONO,
            fomtfhc.AMCTDISPLAYNAME,
            fhs.FHSDESCRIPTION,
            fhs.FHSTRADEDATE,
            fhs.FHSTYPE,
            fhs.FHSUNITS,
            fhs.FHSPRICE,
            fhs.FHSAMOUNT,
            fomtfhc.FOMTRFNUM,
            fomtfhc.FOMTMODEOFHOLDING
    FROM
        FCFHS fhs, (SELECT
        fht.FHTRFNUM,
            fomtamc.FOMTFOLIONO,
            fomtamc.FOMTRFNUM,
            fomtamc.AMCTDISPLAYNAME,
            fomtamc.FOMTMODEOFHOLDING
    FROM
        FCFHT fht, (SELECT
        fomtResult.FOMTFOLIONO,
            fomtResult.FOMTRFNUM,
            amct.AMCTDISPLAYNAME,
            fomtResult.FOMTMODEOFHOLDING
    FROM
        FCAMCT amct, (SELECT
        fomt.FOMTFOLIONO,
            fomt.FOMTRFNUM,
            fomt.FOMTAMCTRFNUM,
            fomt.FOMTMODEOFHOLDING
    FROM
        FCFOMT fomt
    WHERE
        fomt.FOMTRFNUM IN (SELECT
                UFTFOMTRFNUM
            FROM
                FCUFT
            WHERE
                UFTUBDRFNUM = ${userPk})) fomtResult
    WHERE
        amct.AMCTRFNUM = fomtResult.FOMTAMCTRFNUM) fomtamc
    WHERE
        fht.FHTFOMTRFNUM = fomtamc.FOMTRFNUM) fomtfhc
    WHERE
        fhs.FHSFHTRFNUM = fomtfhc.FHTRFNUM
    ORDER BY fhs.FHSSOPTRFNUM , fhs.FHSTRADEDATE) folioDetails
    WHERE
        sopt.SOPTRFNUM = folioDetails.FHSSOPTRFNUM) folioSopt
WHERE
    folioSopt.SOPTSMTRFNUM = smt.SMTRFNUM;""".as[(Long, String, String, String, Date, String, BigDecimal, BigDecimal, BigDecimal, Long, String, String, String, String)]

    db.run(query).map(values => {
      values.foreach(value => {
        val fundId = value._1
        if (fundMap.contains(fundId)) {
          val transactionDetailsList = transactionsList(transactionsList.size - 1).transactionList
          val transDate = new util.Date(value._5.getTime)
          transactionDetailsList.+=(TransactionDetails(transDate, value._4, value._9.toDouble, value._8.toDouble, value._7.toDouble, BuySellEnum.withName(value._6)))
          transactionsList(transactionsList.size - 1) = transactionsList(transactionsList.size - 1).copy(transactionList = transactionDetailsList)
        } else {
          fundMap.+=(fundId -> true)
          val transactionDetailsList: ListBuffer[TransactionDetails] = ListBuffer[TransactionDetails]()
          val transDate = new util.Date(value._5.getTime)
          val schemePlan = schemeHelper.getSchemePlan(value._12)
          val divFreq = schemeHelper.getDivFrequency(value._13)
          val dividendOption = schemeHelper.getDivOption(value._14)
          transactionDetailsList.+=(TransactionDetails(transDate, value._4, value._9.toDouble, value._8.toDouble, value._7.toDouble, BuySellEnum.withName(value._6)))
          val transaction = Transaction(value._2, fundId, value._11, schemePlan, divFreq, dividendOption, transactionDetailsList)
          transactionsList.+=(transaction)
        }
      })
      transactionsList
    })
  }

  def getUserTransactions(userPk: Long): Future[List[TransactionSummary]] = {

    implicit val getTransactionSummary = GetResult(r => TransactionSummary(r.nextLong, r.nextLong, r.nextString, r.nextString, r.nextString, r.nextString, r.nextString, r.nextString, r.nextLong, r.nextDouble, r.nextString, false, false));

    val query = sql"""SELECT
  od.OMTRFNUM AS orderId,
  od.SOTRFNUM AS subOrderId,
  fnd.SMTDISPLAYNAME AS fundName,
  fnd.SOPTSCHEMEPLAN AS schemePlan,
  fnd.SOPTDIVIDENDFRQN AS dividendFreq,
  fnd.SOPTDIVIOPTIONTYPE AS dividendOption,
  od.CREATEDATE AS subOrderDate,
  ostm.OSTMDISPLAYNAME AS subOrderStatus,
  ostm.OSTMRFNUM AS subOrderState,
  CASE
  WHEN
    ISNULL(od.SOTORDERQUANTITY)
    THEN
      od.SOTORDERAMOUNT
  ELSE od.SOTORDERQUANTITY
  END AS subOrderAmount,
  CASE
  WHEN od.SOTINVESTMENTMODE = 'S' THEN 'SIP'
  ELSE 'LUMPSUM'
  END AS subOrderInvestmentMode
FROM
  FCOSTM ostm,
  (SELECT
     omt.OMTRFNUM,
     sot.SOTRFNUM,
     sot.SOTSOPTRFNUM,
     sot.SOTOSTMSTATERFNUM,
     sot.CREATEDATE,
     sot.SOTORDERAMOUNT,
     sot.SOTORDERQUANTITY,
     sot.SOTINVESTMENTMODE,
     sot.SOTSIPINSTALLMENTS
   FROM
     FCOMT omt, FCSOT sot
   WHERE
     omt.OMTUBDRFNUM = ${userPk}
     AND sot.SOTOMTRFNUM = omt.OMTRFNUM) AS od,
  (SELECT
     sopt.SOPTRFNUM, smt.SMTDISPLAYNAME, sopt.SOPTSCHEMEPLAN, sopt.SOPTDIVIOPTIONTYPE, sopt.SOPTDIVIDENDFRQN
   FROM
     FCSOPT sopt, FCSMT smt
   WHERE
     smt.SMTRFNUM = sopt.SOPTSMTRFNUM) AS fnd
WHERE
  od.SOTSOPTRFNUM = fnd.SOPTRFNUM
  AND od.SOTOSTMSTATERFNUM = ostm.OSTMRFNUM
ORDER BY od.CREATEDATE DESC, od.SOTRFNUM DESC;""".as[TransactionSummary];
    db.run(query).map(data => data.toList);
  }


}


object SlickKit {

  implicit class SQLActionBuilderConcat(a: SQLActionBuilder) {
    def concat(b: SQLActionBuilder): SQLActionBuilder = {
      SQLActionBuilder(a.queryParts ++ b.queryParts, new SetParameter[Unit] {
        def apply(p: Unit, pp: PositionedParameters): Unit = {
          a.unitPConv.apply(p, pp)
          b.unitPConv.apply(p, pp)
        }
      })
    }
  }

}