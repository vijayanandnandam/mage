package service

import javax.inject.Inject

import constants.{DBConstants, DateConstants, IntegrationConstants, OrderConstants}
import data.model.Tables.{FcsmtRow, FcsoptRow, FcsotRow}
import helpers.OrderHelper
import models.{CancelSubOrder, FCOrderEntryModel, FCXsipOrderEntryModel, UserLoginObject}
import models.integration.enumerations._
import org.slf4j.LoggerFactory
import repository.module.{OrderRepository, PasswordRepository, SchemeRepository}
import service.integration.{BSEStarOrderEntryServiceImpl, BSEStarUploadServiceImpl}
import utils.DateTimeUtils

import scala.collection.mutable
import scala.collection.mutable.ListBuffer
import scala.concurrent.{ExecutionContext, Future}

/**
  * Created by fincash on 31-03-2017.
  */
class OrderCancelService @Inject()(implicit ec: ExecutionContext, orderRepository: OrderRepository,
                                   bseStarOrderEntryService: BSEStarOrderEntryServiceImpl,
                                   passwordRepository: PasswordRepository,
                                   bSEStarUploadServiceImpl: BSEStarUploadServiceImpl,
                                   orderHelper: OrderHelper, schemeRepository: SchemeRepository) extends DBConstants
  with IntegrationConstants with OrderConstants with DateConstants{

  val logger, log = LoggerFactory.getLogger(classOf[OrderCancelService])


  def isCancellationAllowed(subOrderIdList: ListBuffer[Long], userPk: Long): Future[mutable.HashMap[Long, Boolean]] = {

    orderRepository.getBSECutOff(BSE_STD_CUTOFF_KEY).flatMap(bseCutOff => {
      orderRepository.getSubOrderListDetails(subOrderIdList, userPk).flatMap(subOrderList => {
        checkSubOrderCancelAllowed(subOrderList.toList, bseCutOff).map(sotCancelTuple => {
          val subOrderCancelMap = mutable.HashMap[Long, Boolean]()
          sotCancelTuple.foreach(cancelTuple => {
            subOrderCancelMap.+=(cancelTuple._1 -> cancelTuple._2)
          })
          subOrderCancelMap
        })
      })
    })
  }

  def checkSubOrderCancelAllowed(subOrderList: List[FcsotRow], bseCutOff: String): Future[List[(Long, Boolean)]] = {


    orderHelper.getSubOrdersCategory(subOrderList).flatMap(subOrderCategoryMap =>{
      Future.sequence(for (subOrder <- subOrderList) yield {
        if (subOrder.sottranscnmode == RELIANCE_TRANSACTION_MODE) {
          Future {
            (subOrder.id, false)
          }
        } else {
          val category = subOrderCategoryMap.get(subOrder.id).get
          orderHelper.isOrderCancelAllowed(subOrder.id).map(isCancelAllowed => {
            (subOrder.id, isCancelAllowed)
          })
        }
      })
    })
  }

  def cancelOrder(cancelSubOrder: CancelSubOrder, userLoginObject: UserLoginObject): Future[Boolean] = {

    bSEStarUploadServiceImpl.validateBSEAccountPassword().flatMap(accntPassUpdated =>{

      passwordRepository.getBSEEncryptedPassword(BSE_ORDER_API_PASS_CODE).flatMap(passRow => {

        val expiryTime = passRow._2
        val isValid = DateTimeUtils.checkBsePassTimeValidity(expiryTime)

        if (isValid) {
          getInvModeAndCancelOrder(cancelSubOrder, userLoginObject)
        } else {
          passwordRepository.updateBSEPassword().flatMap(_ => {
            getInvModeAndCancelOrder(cancelSubOrder, userLoginObject)
          })
        }
      })
    })
  }

  def getInvModeAndCancelOrder(cancelSubOrder: CancelSubOrder, userLoginObject: UserLoginObject): Future[Boolean] = {

    val subOrderId = cancelSubOrder.subOrderId
    val userName = userLoginObject.username.get
    val userPk = userLoginObject.userid.get
    orderRepository.getUserSubOrderDetails(subOrderId, userPk).flatMap(subOrderList => {
      val subOrder = subOrderList.head
      if (subOrder.sotinvestmentmode == LUMPSUM_INVESTMENT_MODE) {
        cancelLumpSumOrder(subOrder, cancelSubOrder, userLoginObject).map(cancelled => {
          cancelled
        })
      } else {
        cancelSipOrder(subOrder, cancelSubOrder, userLoginObject).map(cancelled => {
          cancelled
        })
      }
    })
  }

  def cancelLumpSumOrder(subOrder: FcsotRow, cancelSubOrder: CancelSubOrder, userLoginObject: UserLoginObject): Future[Boolean] = {

    val userName = userLoginObject.username.get
    orderRepository.getSubOrderBSESchemeCode(subOrder.id).flatMap(bseSchemeCode => {
      orderRepository.getOrderMasterDetails(subOrder.sotomtrfnum).flatMap(omtRow => {

        val order = omtRow.get
        val clientCode = userLoginObject.userid.get.toString
        val dpTransaction = DPTxnEnum.withName(order.omtdptranscn)
        val uniqueRefNo = DateTimeUtils.convertDateToFormat(DateTimeUtils.getCurrentDate(),BSE_UNIQUE_REF_NO_DATE_FORMAT) + subOrder.id
        val internalRefNo = subOrder.sotomtrfnum + "-" + subOrder.id

        val fcOrderEntry = FCOrderEntryModel("0" + uniqueRefNo, TransactionCodeEnum.CXL, Some(subOrder.sottrnsctionid1.get.toLong), bseSchemeCode, clientCode,
          order.omtbuysell, OrderConstants.BUY_SELL_TYPEMAP.getOrElse(subOrder.sotbuyselltype, ""), dpTransaction, AllRedeemEnum.N,
          Some(internalRefNo), Some(subOrder.sotorderamount), None, cancelSubOrder.ipaddress, None)

        bseStarOrderEntryService.getOrderEntryParamResponse(fcOrderEntry,subOrder.id.toString, userName).map(bseOrderValidateWrapper => {

          val errorList = bseOrderValidateWrapper.errorList
          if (!errorList.get.isEmpty) {
            logger.debug("LumpSum Order Not Cancelled in BSE")
            false
          } else {
            logger.debug("LumpSum Order Cancelled successfully in BSE")
            orderRepository.updateSubOrderState(subOrder.id, subOrder.sotomtrfnum, subOrder.sotostmstaterfnum, ORDER_CANCELLED, userName).map(updated =>{
              orderHelper.notifyZendesk(subOrder,order,ORDER_STATUS_SUCCESS,userName)
            })
            true
          }
        })
      })
    })
  }

  def cancelSipOrder(subOrder: FcsotRow, cancelSubOrder: CancelSubOrder, userLoginObject: UserLoginObject): Future[Boolean] = {

    val userName = userLoginObject.username.get

    orderRepository.getSubOrderBSESchemeCode(subOrder.id).flatMap(bseSchemeCode => {
      orderRepository.getOrderMasterDetails(subOrder.sotomtrfnum).flatMap(omtRow => {

        val order = omtRow.get
        val clientCode = userLoginObject.userid.get.toString
        val dpTransaction = DPTxnEnum.withName(order.omtdptranscn)
        val transactionMode = TransactionModeEnum.withName(subOrder.sottype)
        val uniqueRefNo = DateTimeUtils.convertDateToFormat(DateTimeUtils.getCurrentDate(),BSE_UNIQUE_REF_NO_DATE_FORMAT) + subOrder.id
        val internalRefNo = order.id + "-" + subOrder.id

        var fcXsipOrderEntry = FCXsipOrderEntryModel("0" + uniqueRefNo, TransactionCodeEnum.CXL, bseSchemeCode, clientCode,
          DateTimeUtils.getEstimatedSIPDate(subOrder.sotsipdayofmonth.get),
          OrderConstants.FREQUENCY_MAP.getOrElse(subOrder.sotsipfrequency.get, ""), transactionMode, dpTransaction, Some(internalRefNo),
          OrderConstants.ROLLING_FREQUENCY, subOrder.sotorderamount, subOrder.sotsipinstallments.get, None, None,
          FirstOrderEnum.Y, Some(subOrder.sottrnsctionid2.get.toLong), cancelSubOrder.ipaddress, None)

        bseStarOrderEntryService.getXsipOrderEntryParamResponse(fcXsipOrderEntry,subOrder.id.toString, userName).map(bseXsipOrderValidateWrapper => {

          val errorList = bseXsipOrderValidateWrapper.errorList
          if (!errorList.get.isEmpty) {
            logger.debug("Sip Order Not Cancelled in BSE")
            false
          } else {
            logger.debug("Sip Order Cancelled successfully in BSE")
            orderRepository.updateSubOrderState(subOrder.id, subOrder.sotomtrfnum, subOrder.sotostmstaterfnum, ORDER_CANCELLED, userName).map(updated =>{
              orderHelper.notifyZendesk(subOrder,order,ORDER_STATUS_SUCCESS,userName)
            })
            true
          }
        })
      })
    })
  }
}
