package service.integration

import java.sql.Time
import java.util.{Calendar, Date}
import javax.inject.Inject

import constants.{DBConstants, OrderConstants}
import data.model.Tables.FcbsufRow
import models.SubOrder
import org.slf4j.LoggerFactory
import repository.module.OrderRepository

import scala.concurrent.{ExecutionContext, Future}

/**
  * Created by fincash on 05-05-2017.
  */
class BSEHelper @Inject()(implicit ec: ExecutionContext,
                          orderRepository: OrderRepository) extends DBConstants with OrderConstants{

  val logger, log = LoggerFactory.getLogger(classOf[BSEHelper])

  def getSchemeSuffix(subOrder: SubOrder, orderType:String):Future[String] = {

    orderRepository.getBSESchemeSuffix(subOrder.buySchemeOptionRfnum).map(bsufRow =>{
      if(bsufRow.isEmpty ){
        ""
      } else if(isSuffixFinalCodeValid(bsufRow.get.bsuffinalcode)){
        bsufRow.get.bsuffinalcode.get
      }
      else {
        if(!isSuffixValid(subOrder,bsufRow.get, orderType)){
          ""
        } else{
          bsufRow.get.bsufsuffixcode
        }
      }
    })
  }

  def isSuffixFinalCodeValid(bsufFinalCode:Option[String]) : Boolean= {

    bsufFinalCode.nonEmpty && bsufFinalCode.get.length > 0
  }

  def isSuffixValid(subOrder: SubOrder, bsufRow: FcbsufRow, orderType:String):Boolean = {

    if(orderType != BUYSELL_BUY){
      false
    } else{
      if(bsufRow.bsufisamountbased == Y_FLAG && bsufRow.bsufistimebased == Y_FLAG){
        isThresholdAmountReached(subOrder.amount.get, bsufRow.bsufthresoldamount.get) &&
          isBeforeCutOffTime(bsufRow.bsufbsecutofftime.get)
      } else if(bsufRow.bsufisamountbased == Y_FLAG ){
        isThresholdAmountReached(subOrder.amount.get, bsufRow.bsufthresoldamount.get)
      } else{
        isBeforeCutOffTime(bsufRow.bsufbsecutofftime.get)
      }
    }
  }

  def isThresholdAmountReached(orderAmt:Double, thresholdAmt:Double):Boolean = {
    orderAmt >= thresholdAmt
  }

  def isBeforeCutOffTime(cutOffTime:Time):Boolean = {

    val currOffTimeCal = Calendar.getInstance()

    val cutOffTimeCal = Calendar.getInstance()
    cutOffTimeCal.setTimeInMillis(cutOffTime.getTime)
    cutOffTimeCal.set(Calendar.DAY_OF_MONTH, currOffTimeCal.get(Calendar.DAY_OF_MONTH))
    cutOffTimeCal.set(Calendar.MONTH, currOffTimeCal.get(Calendar.MONTH))
    cutOffTimeCal.set(Calendar.YEAR, currOffTimeCal.get(Calendar.YEAR))

    cutOffTimeCal.after(currOffTimeCal)
  }
}
