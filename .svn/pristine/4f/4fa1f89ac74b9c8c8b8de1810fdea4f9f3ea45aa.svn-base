package service

import javax.inject.Inject

import constants.{DBConstants, MongoConstants}
import data.model.Tables.{FceubdRow, FceubdRowWrapper, FcubdRow}
import helpers.UserHelper
import models.JsonFormats._
import models._
import org.slf4j.LoggerFactory
import play.api.mvc.Request
import reactivemongo.bson.BSONDocument
import repository.module.UserRepository
import repository.tables.{FceubdRepo, FcultRepo}
import service.integration.BSEClientService
import slick.jdbc.MySQLProfile.api._
import utils.RequestUtils

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.Future

/**
  * @author fincash
  *
  */
class UserService @Inject()(fcultRepo: FcultRepo, fceubdRepo: FceubdRepo, userRepository: UserRepository, userHelper: UserHelper,
                            mongoDbService: MongoDbService, bSEClientService: BSEClientService)
  extends MongoConstants with DBConstants{

  val logger, log = LoggerFactory.getLogger(classOf[UserService])

  def collection(name: String) =  mongoDbService.collection(name)

  def postUserDataToDb() = { }


  def activateUser(userid: Long, ipAddress: String) : Future[Boolean] = {
        fceubdRepo.getById(userid).map(userRow =>{
          if(userRow.nonEmpty){
            val newRow = userRow.get.copy(eubdisvarified = Some(Y_FLAG))
            val bseObject = fceubdRepo.updateById(newRow.id, newRow).flatMap(value => {
              bSEClientService.getBSERegistrationStatus(userid).flatMap(bseStatus => {
                if (!bseStatus){
                  fcultRepo.filter(_.ultubdrfnum === userid).flatMap(ultRow => {
                    if (ultRow.nonEmpty){
                      val username = ultRow.head.ultusername
                      bSEClientService.bseRegistration(userid, ipAddress, Some(username)).map(bseObj => {
                        log.debug("Bse user response ", bseObj)
                        bseObj
                      })
                    }
                    else {
                      Future.apply("")
                    }
                  })
                }else{
                  Future.apply("")
                }
              })
            })
            true
          }else {
            false
          }
        })
  }

  def getEUBDbyPk(userid: Long): Future[Option[FceubdRow]] = {
    fceubdRepo.getById(userid).map(row => {
      row
    })
  }

  def getUsernameFromRequest(request: Request[Any]): Future[Option[String]] = {
    getUserObjectFromReq(request).map(value =>{
      if(value.nonEmpty){
        value.get.username
      }else{
        None
      }
    })
  }

  def getUseridFromRequest(request: Request[Any]): Future[Option[Long]] = {
    getUserObjectFromReq(request).map(value =>{
      if(value.nonEmpty){
        value.get.userid
      }else{
        None
      }
    })
  }

  def getUserObjectFromReq(request: Request[Any]):Future[Option[UserLoginObject]] = {
    val token = getTokenFromRequest(request)
    if(token.isEmpty){
      return Future.apply(None)
    }
    val findquery = BSONDocument("token" -> token)
    //var username = "";
    collection(TOKEN_COLLECTION_NAME).flatMap { coll =>
      coll.find(findquery)
        .one[BSONDocument].map { doc =>
        if (doc.nonEmpty) {
          val document = doc.get
          Some(new UserLoginObject(document.getAs[String]("username"),document.getAs[Long]("userid"),document.getAs[Long]("foliocount"),
            document.getAs[String]("firstname"),document.getAs[String]("pan"),document.getAs[String]("mobile")))
          //username
        } else {
          None
        }
      }
    }
  }

  def getTokenFromRequest(request: Request[Any]): Option[String] = {
    request.headers.get("Authorization").map { authHeader =>
      if(authHeader.nonEmpty){
        return Some(authHeader.replaceFirst("Bearer ", ""))
      }
      return None
    }
  }

  /**
    * This method is used to create a new user
    *
    * @param data
    * @return
    */

  def getUserByUserName(userName: String): Future[Option[FcubdRow]] = {
    userRepository.getUserByUsername(userName)
  }

  def getUserNomineeDetails(userName:String):Future[Option[String]] = {
      userRepository.getUserNomineeDetails(userName).map(nomineeList =>{
        val nomineeFutureList = for(nominee <- nomineeList) yield{
          userHelper.getNomineeLabel(nominee._1,nominee._2)
        }
        nomineeFutureList.headOption
      })
  }

  def getUserBankDetails(userName:String):Future[List[String]] = {
    userRepository.getUserBankDetails(userName).map(banksList =>{
      for(bank <- banksList) yield{
        bank.bmtbankname
      }
    })
  }

  def saveOTPDetails(userId:Long,otp:String,gatewayId:String,purpose:String):Future[Long] = {
    userRepository.saveOTPDetails(userId,otp,gatewayId,purpose)
  }

  def updateOTPMessageId(messageId:String,otprfnum:Long,userName:String):Future[Int] = {
    userRepository.updateOTPMessageId(messageId,otprfnum,userName)
  }

  def validateOTP(otp:String,purpose:String,userId:Long):Future[Int] = {
    userRepository.validateOTP(otp,purpose,userId).map(valuesList =>{
      if(valuesList.isEmpty){
        0
      } else{
        1
      }
    })
  }

  def updateOTPStatus(messageId:String,status:String):Future[Int] = {
    userRepository.updateOTPStatus(messageId,status)
  }

  def getMessageStatus(messageId:String):Future[String] = {
    userRepository.getMessageStatus(messageId)
  }
}