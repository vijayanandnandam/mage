package controllers

import javax.inject.Inject

import constants.DBConstants
import models.SubOrderUnitDetails
import models.batch.BatchReqJsonFormats._
import models.OrderJsonFormats._
import models.batch.{PaymentStatusReqModel, SIPMailReqModel}
import play.api.libs.json.Json
import play.api.mvc.{Action, Controller}
import service.{OrderService, PaymentService, UserService, ZendeskService}

import scala.concurrent.ExecutionContext

/**
  * Created by fincash on 03-05-2017.
  */
class BatchController @Inject()(implicit ec: ExecutionContext, zendeskService: ZendeskService, orderService: OrderService,
                                paymentService: PaymentService, userService: UserService) extends Controller with DBConstants {


  def getBSEPaymentStatus() = Action.async(parse.json) { request =>

    val payReqModel = request.body.as[PaymentStatusReqModel]

    paymentService.getBSEPaymentStatus(payReqModel, SYSTEM_USER).map(paymenStatus => {
      Ok(Json.obj("paymentStatus" -> paymenStatus))
    })
  }

  def sendSIPMail() = Action.async(parse.json) { request =>
    val sipReqModel = request.body.as[SIPMailReqModel]
    userService.sendISIPMandateMail(sipReqModel.subOrderId, sipReqModel.subOrderToState).map(mailResp => {
      Ok(Json.obj("sipMailResponse" -> mailResp))
    })
  }

  def sendZendeskOrderUpdateTicket() = Action.async(parse.json) { request =>
    val subOrderUnitDetails = request.body.as[SubOrderUnitDetails];
    orderService.getOrderStateDisplayName(subOrderUnitDetails.orderState).flatMap(orderDisplayName => {
      zendeskService.postOrderUnitUpdate(subOrderUnitDetails.copy(orderStateName = Some(orderDisplayName))).map(isTicketGenerated => {
        Ok(Json.obj("ticketGenerated" -> isTicketGenerated))
      })
    })
  }

  def placeQueuedOrders = Action.async{

    orderService.placeQueuedOrders().map(value =>{
      Ok
    })
  }

}
