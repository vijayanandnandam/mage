package modules

import java.lang.Boolean

import com.google.inject.{AbstractModule, Guice, Inject}
import org.springframework.context.support.ClassPathXmlApplicationContext
import com.fincash.integration.ws.client.bsestar.MFOrder
import org.springframework.ws.client.core.WebServiceTemplate
import com.google.inject.name.Names

class ApplicationContextBinderModule extends AbstractModule{
  
  override def configure = {
    val applicationContext = new ClassPathXmlApplicationContext("applicationContext-integration.xml")
    applicationContext.start()
    applicationContext.registerShutdownHook()

    val isLive = applicationContext.getBean("isLive").asInstanceOf[Boolean].booleanValue()
    // Guice instance binding
    bind(classOf[Boolean]).annotatedWith(Names.named("isLive")).toInstance(applicationContext.getBean("isLive").asInstanceOf[Boolean])
    if(isLive){
      bind(classOf[WebServiceTemplate]).annotatedWith(Names.named("bseOrderTemplate")).toInstance(applicationContext.getBean("liveBseOrderTemplate").asInstanceOf[WebServiceTemplate])
      bind(classOf[WebServiceTemplate]).annotatedWith(Names.named("bseUploadTemplate")).toInstance(applicationContext.getBean("liveBseUploadTemplate").asInstanceOf[WebServiceTemplate])
      bind(classOf[com.fincash.integration.ws.client.bsestar.ObjectFactory]).annotatedWith(Names.named("bseOrderObjectFactory"))
        .toInstance(applicationContext.getBean("bseStarObjectFactory").asInstanceOf[com.fincash.integration.ws.client.bsestar.ObjectFactory])
      bind(classOf[com.fincash.integration.ws.client.bsestar.upload.ObjectFactory]).annotatedWith(Names.named("bseUploadObjectFactory"))
        .toInstance(applicationContext.getBean("bseStarUploadObjectFactory").asInstanceOf[com.fincash.integration.ws.client.bsestar.upload.ObjectFactory])
    } else{

      bind(classOf[WebServiceTemplate]).annotatedWith(Names.named("bseOrderTemplate")).toInstance(applicationContext.getBean("bseOrderTemplate").asInstanceOf[WebServiceTemplate])
      bind(classOf[WebServiceTemplate]).annotatedWith(Names.named("bseUploadTemplate")).toInstance(applicationContext.getBean("bseUploadTemplate").asInstanceOf[WebServiceTemplate])
      bind(classOf[com.fincash.integration.ws.client.bsestar.ObjectFactory]).annotatedWith(Names.named("bseOrderObjectFactory"))
        .toInstance(applicationContext.getBean("bseStarObjectFactory").asInstanceOf[com.fincash.integration.ws.client.bsestar.ObjectFactory])
      bind(classOf[com.fincash.integration.ws.client.bsestar.upload.ObjectFactory]).annotatedWith(Names.named("bseUploadObjectFactory"))
        .toInstance(applicationContext.getBean("bseStarUploadObjectFactory").asInstanceOf[com.fincash.integration.ws.client.bsestar.upload.ObjectFactory])
    }
  }
}