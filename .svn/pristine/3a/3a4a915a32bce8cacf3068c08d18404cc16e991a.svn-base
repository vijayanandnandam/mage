package controllers

import javax.inject.Inject

import constants.{CNDConstants, HTTPErrorConstants, MongoConstants}
import helpers.{AuthenticatedAction, MailHelper, ZendeskHelper}
import models.UserLoginJsonFormats._
import org.mindrot.jbcrypt.BCrypt
import org.slf4j.LoggerFactory
import org.zendesk.client.v2.model.{Comment, CustomFieldValue}
import play.api.libs.json.Json.toJsFieldJsValueWrapper
import play.api.libs.json.{JsValue, Json}
import play.api.mvc.{Action, Controller, Result}
import reactivemongo.api.commands.{UpdateWriteResult, WriteResult}
import reactivemongo.bson.BSONDocument
import reactivemongo.bson.DefaultBSONHandlers._
import reactivemongo.core.errors.DatabaseException
import repository.module.{UserRepository, ZendeskRepository}
import service._
import utils.RequestUtils

import scala.concurrent.duration.Duration
import scala.concurrent.{Await, ExecutionContext, Future}
import scala.util.{Failure, Success}

class LoginController @Inject()(auth: AuthenticatedAction, userService: UserService, implicit val ec: ExecutionContext, mongoDbService: MongoDbService,
                                userRepository: UserRepository, cartService: CartService, mailService: MailService, mailHelper: MailHelper,
                                configuration: play.api.Configuration, zendeskHelper: ZendeskHelper, zendeskService: ZendeskService, zendeskRepository: ZendeskRepository)
  extends Controller with HTTPErrorConstants with MongoConstants with CNDConstants {

  val logger, log = LoggerFactory.getLogger(classOf[LoginController])

  val staticImagePath = configuration.underlying.getString("mail.url.staticImagePath")
  val baseUrl = configuration.underlying.getString("mail.url.baseurl")


  def collection(name: String) = mongoDbService.collection(name)

  /**
    * takes in user object and creates a token. Returns the token, along with filling the db with expire time
    *
    * @return
    */
  def getLoginToken = auth.Action.async(parse.json) { request =>

    var requestData = request.body
    var username = requestData.\("username").as[String]
    var password = requestData.\("password").as[String]

    //    var token = userService.getTokenFromRequest(request);
    val token = request.token;
    var folioCount: Long = 0

    val ipAddress = RequestUtils.getIpAddress(request)
    userRepository.signInUser(username, password, ipAddress).flatMap(userTuple => {
      if (userTuple._1 != 0 && userTuple._2 && userTuple._3) {
        val userid = userTuple._1
        val a = userRepository.getNumberOfFoliosByUserPk(userid).map { x => {
          folioCount = x
        }
        }
        Await.result(a, Duration.Inf)
        userRepository.getUserByPk(userid).flatMap(user => {
          if (user.nonEmpty) {
            val retval_tuple = mongoDbService.userDocument(Some(username),Some(userid),Some(folioCount),user.get.ubdfirstname,user.get.ubdpan,user.get.ubdmobileno,None)
            insertOrUpdateInMongo(token, retval_tuple._3, retval_tuple._2, retval_tuple._1, username)
          }
          else {
            Future {
              Ok(Json.obj("success" -> false, "message" -> "User doesn't exists", "error" -> "User doesn't exists"))
            }
          }

        })

      } else if (!userTuple._2) {
        Future {
          Ok(Json.obj("success" -> false, "message" -> "User doesn't exists", "error" -> "User doesn't exists"))
        }
      } else {
        Future {
          Ok(Json.obj("success" -> false, "message" -> "Invalid Password", "error" -> "Invalid Password"))
        }
      }
    })
  }


  /**
    * takes in user object and creates a token. Returns the token, along with filling the db with expire time
    *
    * @return
    */
  def signup = auth.Action.async(parse.json) { request =>
    val requestData = request.body;
    val token = request.token;
    val username = (requestData \ "username").as[String]
    val email = (requestData \ "email").as[String]
    val password = (requestData \ "password").as[String]
    val pwHash = BCrypt.hashpw(password, BCrypt.gensalt())

    val ipAddress = RequestUtils.getIpAddress(request)
    userRepository.signUpUser(username, pwHash, ipAddress).flatMap { userid => {
      if (userid > 0) {
        userRepository.getUserByPk(userid).flatMap(user => {
          if (user.nonEmpty) {
            val retval_tuple = mongoDbService.userDocument(Some(username),Some(userid),None,user.get.ubdfirstname,user.get.ubdpan,user.get.ubdmobileno,None)
            /*sending welcome mail*/
            val heading = PropertiesLoaderService.getConfig().getString("mail.signup.welcome.heading")
            val mailHeaderTemplate = views.html.mailHeader(heading,  mailHelper.getMth)
            val mailBodyTemplate = views.html.welcome(mailHelper.getMth)
            val mailTemplate = views.html.mail(mailHeaderTemplate, mailBodyTemplate, mailHelper.getMth)
            val subj = PropertiesLoaderService.getConfig().getString("mail.signup.welcome.subject")
            val bodyHTML = mailTemplate.toString()
            val bodyText = views.html.welcomeTxt().toString()
            mailService.sendMail(email, subj, Some(bodyText), Some(bodyHTML), None, None, None, None, None, None)
            /*end of mail sending*/
            /*zendesk ticket*/
            val istktAllowed = zendeskHelper.isTktAllowed
            if(istktAllowed){
              val requester = zendeskHelper.createRequester()
              requester.setEmail(username)
              requester.setName(username)
              val comment  = new Comment()
              comment.setBody("New User!")
              comment.setPublic(false)
              val customField1 = new CustomFieldValue(zendeskHelper.ZENDESK_TICKET_USER_STAGE, zendeskHelper.ZENDESK_TICKET_VALUE_SIGN_UP)
              val customField2 = new CustomFieldValue(zendeskHelper.ZENDESK_TICKET_KYC_STATUS, zendeskHelper.ZENDESK_TICKET_VALUE_KYC_NOT_DONE)
              val customFieldList = new java.util.ArrayList[CustomFieldValue]
              customFieldList.add(customField1)
              customFieldList.add(customField2)
              zendeskService.createTicket(requester, zendeskHelper.onBoardingSubject, Some(comment), Some(zendeskHelper.ZENDESK_GROUP_ONBOARDING), username, username, userid,None, Some(TKT_PURPOSE_REGISTRATION), None).map(tktId => {
                if(tktId.nonEmpty){
                  zendeskService.setCustomField(tktId.get, customFieldList, None, None, None)
                  val zdUserId = zendeskHelper.getUserIdByEmail(username)
                  if(zdUserId>0) {
                    val userField = new java.util.HashMap[String, Object]()
                    userField.put(zendeskHelper.ZENDESK_USER_FIELD_NAME_USER_ID, userid.toString)
                    zendeskService.setUserField(zdUserId, userField)
                  }
                }
              })
            }else{
              logger.debug("@@@@@@ tktnot allowed")
            }
            insertOrUpdateInMongo(token, retval_tuple._3, retval_tuple._2, retval_tuple._1, username)
          }
          else {
            Future.apply(Ok(Json.obj("success" -> false, "message" -> "User not found", "error" -> "User not found")))
          }
        })
      }
      else {
        Future.apply(Ok(Json.obj("success" -> false, "message" -> "User already exists", "error" -> "User already exists")))
      }
    }
    }
  }

  def insertOrUpdateInMongo(token: String, newToken: String, userData : JsValue, modifier: BSONDocument, username: String): Future[Result] = {
    val selector = BSONDocument("token" -> token)
    collection(TOKEN_COLLECTION_NAME).flatMap { coll =>
      if (token.isEmpty()) {
        val writeRes: Future[WriteResult] = mongoDbService.insertDoc(coll, modifier)
        writeRes.onComplete {
          case Failure(e) => {
            logger.error("Mongo Error :: " + e.getMessage)
            InternalServerError(Json.obj("success" -> false, "error" -> e.getMessage, "message" -> e.getMessage))
          }
          case Success(writeResult) => {
            logger.debug("successfully inserted document")
          }
        }
        writeRes.map(_ => {
          Ok(Json.obj("id_token" -> newToken,"userData" -> userData, "success" -> true))
        })
      }
      else {
        val writeRes: Future[UpdateWriteResult] = mongoDbService.updateDoc(coll, selector, modifier)
        writeRes.onComplete {
          case Failure(e) => {
            logger.error("Mongo Error :: " + e.getMessage)
            InternalServerError(Json.obj("success" -> false, "error" -> e.getMessage, "message" -> e.getMessage))
          }
          case Success(writeResult) => {
            logger.debug("successfully inserted document with result: $writeResult")
          }
        }
        writeRes.map(_ => {
          Ok(Json.obj("id_token" -> newToken,"userData" -> userData, "success" -> true))
        })
      }
    }.recover {
      case dex: DatabaseException => {
        val abc = dex.getMessage();
        Ok(Json.obj("error" -> dex.message, "success" -> false))
      }
      case e: Exception => {
        val abce = e.getMessage;
        Ok(Json.obj("error" -> e.getMessage, "success" -> false))
      }
    }
  }

  def socialLogin = auth.Action.async(parse.json){ request => {
    val requestData = request.body;
    val name = (requestData \ "name").as[String]
    val email = (requestData \ "email").as[String].toLowerCase

    var folioCount: Long = 0
    val ipAddress = RequestUtils.getIpAddress(request)

    userRepository.getUserByUsername(email).flatMap(_user => {
      //login user
      if (_user.nonEmpty){
        val user = _user.get
        var userid = user.id
        val a = userRepository.getNumberOfFoliosByUserPk(userid).map {x => {
          folioCount = x
        }}
        Await.result(a, Duration.Inf)

        val username = email
        val userTuple = mongoDbService.userDocument(Some(username),Some(userid),Some(folioCount),user.ubdfirstname,user.ubdpan,user.ubdmobileno,None)
        collection(TOKEN_COLLECTION_NAME).flatMap { coll =>
          val writeRes: Future[WriteResult] = mongoDbService.insertDoc(coll, userTuple._1)
          writeRes.onComplete {
            case Failure(e) => {
              logger.error("Mongo Error :: " + e.getMessage)
              InternalServerError(Json.obj("success" -> false, "error" -> e.getMessage, "message" -> e.getMessage))
            }
            case Success(writeResult) => {
              logger.debug("successfully inserted document with result: $writeResult")
            }
          }
          writeRes.map(_ => {
            Ok(Json.obj("id_token" -> userTuple._3,"userData" -> userTuple._2, "success" -> true))
          })
        }

      }
      //signup user
      else {
        val username = email
        val password = scala.util.Random.alphanumeric.take(10).mkString
        val pwHash = BCrypt.hashpw(password, BCrypt.gensalt())
        userRepository.signUpUser(username, pwHash, ipAddress).flatMap { userid => {
          if (userid > 0) {
            userRepository.getUserByPk(userid).flatMap(user => {
              if (user.nonEmpty) {
                val userTuple = mongoDbService.userDocument(Some(username),Some(userid),Some(folioCount),user.get.ubdfirstname,user.get.ubdpan,user.get.ubdmobileno,None)
                /*sending welcome mail*/
                var addressingName = "Investor"
                  if(name.length>0)
                    addressingName = name

                val subj = "Account password"
                val mailHeaderTemplate = views.html.mailHeader("Account Password", mailHelper.getMth)
                val mailBodyTemplate = views.html.password(addressingName, password, mailHelper.getMth)
                val mailTemplate = views.html.mail(mailHeaderTemplate, mailBodyTemplate, mailHelper.getMth)

                val bodyHTML = mailTemplate.toString()
                val bodyText = views.html.passwordTxt(addressingName, password, mailHelper.getMth).toString()
                mailService.sendMail(email, subj, Some(bodyText), Some(bodyHTML)).map(_messageid => {
                  logger.debug("Message id >>> " + _messageid);
                })
                /*end of mail sending*/

                /*zendesk ticket*/
                val istktAllowed = zendeskHelper.isTktAllowed
                if(istktAllowed){
                  val requester = zendeskHelper.createRequester
                  requester.setEmail(username)
                  requester.setName(username)
                  val comment  = new Comment()
                  comment.setBody("New User!")
                  comment.setPublic(false)
                  val customField1 = new CustomFieldValue(zendeskHelper.ZENDESK_TICKET_USER_STAGE, zendeskHelper.ZENDESK_TICKET_VALUE_SIGN_UP)
                  val customField2 = new CustomFieldValue(zendeskHelper.ZENDESK_TICKET_KYC_STATUS, zendeskHelper.ZENDESK_TICKET_VALUE_KYC_NOT_DONE)
                  val customFieldList = new java.util.ArrayList[CustomFieldValue]
                  customFieldList.add(customField1)
                  customFieldList.add(customField2)
                  zendeskService.createTicket(requester, zendeskHelper.onBoardingSubject, Some(comment), Some(zendeskHelper.ZENDESK_GROUP_ONBOARDING), username, username, userid,None, Some(TKT_PURPOSE_REGISTRATION), None).map(tktId => {
                    if(tktId.nonEmpty){
                      zendeskService.setCustomField(tktId.get, customFieldList,None, None, None)
                      val zdUserId = zendeskHelper.getUserIdByEmail(username)
                      if(zdUserId>0){
                        val userField = new java.util.HashMap[String, Object]()
                        userField.put(zendeskHelper.ZENDESK_USER_FIELD_NAME_USER_ID, userid.toString)
                        zendeskService.setUserField(zdUserId, userField)
                      }
                    }
                  })
                }else{
                  logger.debug("@@@ ticket creation not allowed")
                }
                collection(TOKEN_COLLECTION_NAME).flatMap { coll =>
                  val writeRes: Future[WriteResult] = mongoDbService.insertDoc(coll, userTuple._1)
                  writeRes.onComplete {
                    case Failure(e) => {
                      logger.error("Mongo Error :: " + e.getMessage)
                      InternalServerError(Json.obj("success" -> false, "error" -> e.getMessage, "message" -> e.getMessage))
                    }
                    case Success(writeResult) => {
                      logger.debug("successfully inserted document")
                    }
                  }
                  writeRes.map(_ => {
                    Ok(Json.obj("id_token" -> userTuple._3, "userData" -> userTuple._2, "success" -> true))
                  })
                }
              }
              else {
                Future.apply(Ok(Json.obj("success" -> false, "error" -> "User Not Found", "message" -> "User Not Found")))
              }
            })
          }
          else {
            Future.apply(Ok(Json.obj("success" -> false, "error" -> "User already exists", "message" -> "User already exists")))
          }
        }
        }
      }
    })
  }}

  def checkUsernameInDB = auth.Action.async(parse.json) { request => {
    var username = (request.body \ "username").as[String]
    userRepository.checkUser(username).map(value => {
      Ok(Json.obj("doesUserExists" -> value))
    })
  }
  }
}