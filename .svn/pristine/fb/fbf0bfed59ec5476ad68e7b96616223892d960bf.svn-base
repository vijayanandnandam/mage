package service.integration

import javax.inject.Inject

import constants.{IntegrationConstants, OrderConstants}
import data.model.Tables.{FcomtRow, FcsotRow}
import models._
import org.slf4j.LoggerFactory
import repository.module.{FolioRepository, IntegrationRepository}
import service.SchemeService

import scala.collection.mutable
import scala.concurrent.duration.Duration
import scala.concurrent.{Await, ExecutionContext, Future}


/**
  * Created by fincash on 19-04-2017.
  */
class IntegrationServiceImpl @Inject()(implicit ec: ExecutionContext,
                                       bSEIntegrationServiceImpl: BSEIntegrationServiceImpl, relianceIntegrationServiceImpl: RelianceIntegrationServiceImpl,
                                       birlaIntegrationServiceImpl: BirlaIntegrationServiceImpl, integrationRepository: IntegrationRepository,
                                       schemeService: SchemeService, folioRepository: FolioRepository)
  extends IntegrationConstants with OrderConstants {

  val logger, log = LoggerFactory.getLogger(classOf[IntegrationServiceImpl])


  val integrationMap: mutable.HashMap[Long, IntegrationService] = new mutable.HashMap[Long, IntegrationService]()
  integrationMap.+=(BSE_INTEGRATION_VALUE -> bSEIntegrationServiceImpl)
  integrationMap.+=(RELIANCE_INTEGRATION_VALUE -> relianceIntegrationServiceImpl)
  integrationMap.+=(BIRLA_INTEGRATION_VALUE -> birlaIntegrationServiceImpl)


  def placeSubOrders(orderModel: OrderModel, order: FcomtRow, subOrderList: List[FcsotRow], userLoginObject: UserLoginObject): Future[List[ProcessedSubOrderModel]] = {

    var subOrderIdx = -1
    val subOrderProcessedListFtr = for (subOrder <- subOrderList) yield {
      subOrderIdx = subOrderIdx + 1
      val subOrderModel = orderModel.subOrders(subOrderIdx)
      schemeService.getSchemeIdByOptionId(subOrder.sotsoptrfnum.toString).flatMap(smtrfnum => {

        integrationRepository.getSchemeOrderIntegration(smtrfnum, orderModel.orderType).flatMap(integrationTypeList => {
          var integrationType = BSE_INTEGRATION_VALUE
          if (orderModel.orderType == BUYSELL_SELL) {
            if (integrationTypeList.nonEmpty && subOrderModel.additionalDetails.get.instantFlag) {
              integrationType = integrationTypeList.head.siaimtrfnum
            }
          } else {
            if (integrationTypeList.nonEmpty && subOrderModel.allRedeem.isEmpty) {
              integrationType = integrationTypeList.head.siaimtrfnum
            }
          }

          integrationMap.getOrElse(integrationType, bSEIntegrationServiceImpl).placeSubOrders(orderModel, order, subOrder, subOrderModel, userLoginObject).flatMap(orderProcessModel =>{

            integrationRepository.getIntegrationFallbackAllowed(integrationType).flatMap(isFallbackAllowed =>{
              if(orderProcessModel.orderProcessed == ORDER_CONNECTIVITY_FAILURE && isFallbackAllowed){
                bSEIntegrationServiceImpl.placeSubOrders(orderModel, order, subOrder, subOrderModel, userLoginObject).map(bseProcessedOrderModel =>{
                  bseProcessedOrderModel
                })
              } else{
                Future{orderProcessModel}
              }
            })
          })
        })
      })
    }

    Future.sequence(subOrderProcessedListFtr)
  }

  def checkSavingsPlusFullRedemption(subOrderModel: SubOrder): Boolean = {
    var retval = true
    if (!subOrderModel.allRedeem.getOrElse(false)) {
      // true bse, false reliance
      var amount = subOrderModel.amount
      var units = subOrderModel.quantity
      var folioNo = subOrderModel.folioNo.getOrElse("")
      var soptrfnum = subOrderModel.buySchemeOptionRfnum

      val a = folioRepository.getFhtRowByFolioNoAndSoptrfnum(folioNo, soptrfnum).flatMap(fhtrowOption => {
        if (fhtrowOption.nonEmpty) {
          val holdingUnits = fhtrowOption.get.fhtholdingunits
          folioRepository.getCurrNavByFundId(soptrfnum).map(navValues => {
            val currNav = navValues._1
            val navDate = navValues._2
            val currValue = currNav * holdingUnits

            // if amount is non empty
            if (amount.nonEmpty) {
              if (amount.get > 0.90 * currValue) {
                retval = true
              }
              else
                retval = false
            }

            // If amount is empty
            // and units non empty
            else if (units.nonEmpty) {
              if (units.get > 0.90 * holdingUnits) {
                retval = true
              }
              else
                retval = false
            }
            // If both amount and units are empty
            else {
              retval = true
            }
          })
        }
        else {
          // Send to BSE in case fhtRow is empty
          retval = true
          Future {}
        }
      })

      Await.result(a, Duration.Inf)
      retval
    }
    else {
      true
    }
  }
}
