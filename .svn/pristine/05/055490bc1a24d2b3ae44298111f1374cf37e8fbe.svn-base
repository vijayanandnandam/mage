package models

import play.api.data.validation.ValidationError
import play.api.libs.json._

import scala.collection.mutable

/**
  * Created by fincash on 16-02-2017.
  */
case class OrderModel(orderType: String, totalAmount: Option[Double], ipAddress: Option[String], subOrders: List[SubOrder],
                      orderDevice: Option[String], buaRfnum: Option[Long], snapshotPath: Option[String],
                      cdslNdslPhysicalTxnMode: Option[String] = None,
                      fromState: Option[String] = None, toState: Option[String] = None, remarks: Option[String] = None)

case class SubOrder(orderSeq: Long, amount: Option[Double], investmentMode: String, buySchemeOptionRfnum: Long, sellSchemeOptionRfnum: Option[Long], paymentMode: String,
                    sipNoOfInstallments: Option[Int] = None, sipFrequency: Option[String] = None, existingMmtRfnum: Option[Long] = None, bseSchemeCode: Option[String] = None,
                    sipDayOfMonth: Option[Int] = None, quantity: Option[Double] = None, dematPhysicalMode: Option[String] = None, transactionMode: Option[String] = None,
                    orderType: Option[String] = None, fromState: Option[String] = None, toState: Option[String] = None, remarks: Option[String] = None,
                    paymentStatus: Option[String] = None, folioNo: Option[String] = None, allRedeem: Option[Boolean] = None,
                    additionalDetails: Option[SubOrderAdditionalDetails] = None)

case class SubOrderAdditionalDetails(instantFlag: Boolean = true, prodSolnId: Option[Long] = None, prodSolnName: Option[String] = None)

case class CancelSubOrder(subOrderId: Long, ipaddress: Option[String] = None)

case class SchemeDetails(schemeId: Long, schemelegalName: String, schemeDisplayName: String, schemeAMCLegalName: String, schemeAMCDisplayName: String, schemePlan: String,
                         schemeOption: String)

case class SubOrderPaymentStatus(subOrderId: Long, subOrderStatus: String)

case class ProcessedSubOrderModel(subOrderId: Long, orderProcessed: Long, soptrfnum: Long, investmentMode: String, orderType: String, buySellType: String,
                                  schemeDisplayName: Option[String] = None, schemePlan: Option[String] = None, schemeOption: Option[String] = None,
                                  amount: Option[Double] = None, sipNoOfInstallments: Option[Int] = None,
                                  sipFrequency: Option[String] = None, sipDayOfMonth: Option[Int] = None, quantity: Option[Double] = None)

case class ProcessedOrderModel(orderId: Long, subOrderList: List[ProcessedSubOrderModel], orderTime: Option[String] = None)

case class PaymentStatus(statusCode: Long, status: String)

case class SubOrderPaymentStatusList(orderStatusList: List[SubOrderPaymentStatus])

case class SubOrderMandateDetails(mmtrfnum: Long, mandateId: String, mandateType: String)

case class OrderHistoryDetails(historyrfnum: Long, stateName: String, stateDate: String)

case class SubOrderDetails(subOrderId: Long, orderProcessed: Long, investmentMode: String, createDate: String, buySellType: String, schemeName: Option[String] = None,
                           schemePlan: Option[String] = None, schemeOption: Option[String] = None, amount: Option[Double] = None, sipNoOfInstallments: Option[Int] = None,
                           sipFrequency: Option[String] = None, sipDayOfMonth: Option[Int] = None, subOrderHistoryList: Option[List[OrderHistoryDetails]] = None,
                           quantity: Option[Double] = None, stateName: Option[String] = None, mandateDetails: Option[SubOrderMandateDetails] = None,
                           transactionId1: Option[String] = None, transactionId2: Option[String] = None, extDetails: Option[List[SubOrderExtDetails]] = None, schemeCode: Option[Long] = None,
                           stateCode: Option[String] = None)

case class SubOrderExtDetails(extDetailKey: String, extDetailValue: String, extDetailDate: Option[java.util.Date], extDetailDouble: Option[Double])

case class OrderDetails(orderId: Long, orderType: String, subOrderDetails: List[SubOrderDetails], createDate: String, totalAmount: Double, snapshotPath: Option[String] = None,
                        stateName: Option[String] = None, orderHistoryList: Option[List[OrderHistoryDetails]] = None)

case class SubOrderUnitDetails(subOrderId: Long, orderState: Long, remark: String, rtaRef: Option[String] = None, units: Option[Double] = None, amount: Option[Double] = None, tradeDate: Option[String] = None, processId: Option[Long] = None, orderStateName: Option[String] = None)

case class DuplicateOrderModel(smtrfnumList: List[Long])

object OrderJsonFormats {

  implicit val subOrderExtDetailsJsonFormat = Json.format[SubOrderExtDetails]
  implicit val subOrderUnitDetailsJsonFormat = Json.format[SubOrderUnitDetails]
  implicit val paymentStatusJsonFormat = Json.format[PaymentStatus]
  implicit val schemeDetailsJsonFormat = Json.format[SchemeDetails]
  implicit val subOrderAdditionalDetailsFormat = Json.format[SubOrderAdditionalDetails]
  implicit val subOrderModelJsonFormat = Json.format[SubOrder]
  implicit val orderModelJsonFormat = Json.format[OrderModel]
  implicit val orderStatusJsonFormat = Json.format[SubOrderPaymentStatus]
  implicit val processedSubOrderJsonFormat = Json.format[ProcessedSubOrderModel]
  implicit val prcessedOrderModelJsonFormat = Json.format[ProcessedOrderModel]
  implicit val orderStatusListJsonFormat = Json.format[SubOrderPaymentStatusList]
  implicit val subOrderMandateDetailsFormat = Json.format[SubOrderMandateDetails]
  implicit val subOrderHistoryDetailsJsonFormat = Json.format[OrderHistoryDetails]
  implicit val subOrderDetailsJsonFormat = Json.format[SubOrderDetails]
  implicit val orderDetailsJsonFormat = Json.format[OrderDetails]
  implicit val DuplicateOrderModelJsonFormat = Json.format[DuplicateOrderModel]
}
