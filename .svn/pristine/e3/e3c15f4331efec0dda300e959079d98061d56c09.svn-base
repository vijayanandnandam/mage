package service

import javax.inject.Inject

import constants.{DBConstants, OrderConstants}
import helpers.SchemeHelper
import models._
import models.FundsJsonFormats._
import play.api.Logger
import play.api.libs.json.JsObject
import reactivemongo.api.collections.bson.BSONCollection
import reactivemongo.bson.{BSONDocument, BSONObjectID}
import reactivemongo.play.json.BSONFormats
import repository.module.{SchemeRepository, UserRepository}
import service.integration.BSEHelper

import scala.concurrent.ExecutionContext.Implicits.global
import scala.collection.mutable.ListBuffer
import scala.concurrent.Future

/**
  * Created by Fincash on 04-02-2017.
  */
class CheckoutService @Inject()(mongoDbService: MongoDbService, schemeRepository: SchemeRepository, schemeService: SchemeService,
                                userService: UserService, userRepository: UserRepository,
                                schemeHelper: SchemeHelper, bSEHelper: BSEHelper) extends DBConstants with OrderConstants{

  /**
    * This method is used to fetch information about funds with which the checkout process should pe initiated
    *
    * @param checkoutMaster
    * @param userName
    * @return
    */
  def getCheckoutFunds(checkoutMaster: Future[BSONCollection], userName: String, cartId: String): Future[List[CheckoutFund]] = {

    var findQuery = BSONDocument("_id" -> BSONObjectID.parse(cartId).get)

    checkoutMaster.flatMap(coll => {

      coll.find(findQuery).one[BSONDocument].flatMap(doc => {

        if (doc.isEmpty) {
          //cart is empty
          Future.apply(List[CheckoutFund]());
        } else {
          val fundsList = (BSONFormats.BSONDocumentFormat.writes(doc.get).as[JsObject] \ "funds").as[List[FundDoc]]
          val checkoutFunds = for (fund <- fundsList) yield {
            val abc = for {
              schemeOptionsList <- schemeRepository.getAllOptionsBySchemeId(fund.id)
              schemeBSEData <- schemeRepository.getBSEDataBySchemeId(fund.id)
              schemeRPAData <- schemeRepository.getRPADataBySchemeId(fund.id)
              //schemeAIPDataList <- schemeService.getSchemeAIPDataByOptionsList(schemeOptionsList.toList)
            //deductionDatesList <- schemeService.getSchemeDates(fundsJsonList)
            //minTenureList <- schemeService.getMinTenure(fundsJsonList)
            } yield {
              Future.sequence(for (option <- schemeOptionsList.toList) yield {
                val isDefault = if (option.soptisdefault == Y_FLAG) true else false
                var minLumpsumAmount = 0D;
                var minAddLumpSumAmount = 0D;
                for(bseRowTuple <- schemeBSEData.zipWithIndex){
                  val bseRow = bseRowTuple._1
                  val index = bseRowTuple._2
                  if(bseRow.bsesoptrfnum == option.id){
                    minLumpsumAmount = schemeHelper.getMinLumpSumAmount(schemeRPAData(index),bseRow).getOrElse(0D)//bseRow.bseminpurchaseamt.getOrElse(0D);
                    minAddLumpSumAmount = schemeHelper.getMinAddLumpSumAmount(schemeRPAData(index),bseRow).getOrElse(0D) //bseRow.bseaddpuramtmultiple.getOrElse(0D);
                  }
                }
                schemeRepository.getBSATData(option.id).map(bsatRowList =>{

                  val bsatData = bsatRowList.sortBy(_.bsatminamount).map(bsatRow =>{
                    val days = schemeHelper.getAllowedDates(bsatRow)
                    AIPData(option.id, schemeHelper.getSipFrequencyFullForm(bsatRow.bsatfrequency), days, bsatRow.bsatminamount, bsatRow.bsatmaxamount,
                      bsatRow.bsatmintenure, bsatRow.bsatmaxtenure, bsatRow.bsatmultiplier)
                  })

                  FundOption(option.id, option.soptlegalname,
                    schemeHelper.getSchemePlan(option.soptschemeplan),
                    schemeHelper.getDivFrequency(option.soptdividendfrqn),
                    schemeHelper.getDivOption(option.soptdivioptiontype),
                    true, minLumpsumAmount,isDefault, Some(bsatData),minAddLumpSumAmount)
                })
                /*val aipData = schemeAIPDataList.filter(aip => aip.aiptsoptrfnum == option.id).sortBy(aip => aip.aiptminamount).map(aiptRow => {
                  new AIPData(option.id, schemeHelper.getSipFrequencyFullForm(aiptRow.aiptfrequency), aiptRow.aiptsipday, aiptRow.aiptminamount, aiptRow.aiptmaxamount, aiptRow.aiptmintenure,
                    aiptRow.aiptmaxtenure, aiptRow.aiptmultiplier)
                })*/


              }).map(optionsList =>{
                CheckoutFund(fund, optionsList)
              })
            }
            abc.flatMap(value => value)
          }
          Future.sequence(checkoutFunds)
          //new ListBuffer[CheckoutFund]();
        }
      })
    })
  }

  /**
    * This method is used to fetch bank information for provided userPk when checkout process is initiated
    *
    * @param userPk
    * @return
    */
  def getCheckoutBanks(userPk: Long): Future[CheckoutBank] = {
    userRepository.getUserBank(userPk).map(userBank => {
      new CheckoutBank(Some(userBank.buaid.get.toLong), userBank.bank.get.bankName, userBank.bank.get.branch, userBank.accountNumber, userBank.bank.get.IFSC,
        userBank.bank.get.bankType,userBank.bank.get.bmtrfnum)
    })
  }

  /**
    * This method is used to fetch nominee information when checkout process is initiated
    *
    * @param userPk
    * @return
    */
  def getCheckoutNominee(userPk: Long): Future[Option[CheckoutNominee]] = {
    userRepository.getUserNominee(userPk).map(userNominee => {
      if (userNominee.ndtid.isDefined && userNominee.ndtid.get.length > 0 && userNominee.nomineeName.isDefined && userNominee.nomineeRelation.isDefined) {
        Some(new CheckoutNominee(Some(userNominee.ndtid.get.toLong), userNominee.nomineeName, userNominee.nomineeRelation))
      } else {
        None
      }
    })
  }

  /**
    *
    * @param summary
    * @return
    */
  def checkLZeroLOne(summary:Summary):Future[Seq[CheckoutLZeroLOne]] = {

    Future.sequence(for(checkoutFund <- summary.fundList) yield{
      bSEHelper.checkLZeroLOne(checkoutFund.soptRfnum,checkoutFund.amount,BUYSELL_BUY,checkoutFund.investmentMode).map(suffixTuple =>{
        val suffix = suffixTuple._1
        val bsufRow = suffixTuple._2
        var isLOne = false
        var isLZero = false
        var lOneLZeroDetails:Option[LOneLZeroDetails] = None
        isLOne = suffix.trim.indexOf(L_ONE_ORDER) > -1
        isLZero = suffix.trim.indexOf(L_ZERO_ORDER) > -1
        if((isLOne || isLZero) && bsufRow.nonEmpty){

          lOneLZeroDetails = Some(LOneLZeroDetails(bsufRow.get.bsufbsecutofftime.get.toString,bsufRow.get.bsufbsefundscutoff.get.toString))
        }
        CheckoutLZeroLOne(checkoutFund,isLOne = isLOne, isLZero = isLZero,lOneLZeroDetails=lOneLZeroDetails)
      })
    })
  }

}
