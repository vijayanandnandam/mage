package helpers

import java.io.File
import javax.inject.Inject

import constants._
import org.slf4j.LoggerFactory
import org.zendesk.client.v2.Zendesk
import org.zendesk.client.v2.model.Ticket.Requester
import org.zendesk.client.v2.model.{CustomFieldValue, _}
import service.PropertiesLoaderService

import scala.concurrent.ExecutionContext

/**
  * Created by Fincash on 11-05-2017.
  */
class ZendeskHelper @Inject()(implicit val ec: ExecutionContext, configuration: play.api.Configuration) extends CNDConstants
  with ZendeskConstants{

  val logger,log = LoggerFactory.getLogger(classOf[ZendeskHelper])
  val zendeskURL = PropertiesLoaderService.getConfig().getString("zendesk.url")
  val zendeskAuthEmail = PropertiesLoaderService.getConfig().getString("zendesk.auth.email")
  val zendeskAuthPass = PropertiesLoaderService.getConfig().getString("zendesk.auth.password")
  val zendeskOauthToken = PropertiesLoaderService.getConfig().getString("zendesk.auth.oauthtoken")
  val isTktAllowed = configuration.underlying.getBoolean("zendesk.tktAllowed")
  val zendesk = new Zendesk.Builder(zendeskURL).setUsername(zendeskAuthEmail).setToken(zendeskOauthToken).setClient(CustomAsyncHttpClient.ASYNC_HTTP_CLIENT).build()
  val onBoardingSubject = PropertiesLoaderService.getConfig().getString("zendesk.onboarding.defaultSubject")
  val purchaseSubject = PropertiesLoaderService.getConfig().getString("zendesk.purchase.defaultSubject")

  def createRequester() : Requester = {
    new Ticket.Requester()
  }

  def createTicketObject():Ticket = {
    new Ticket()
  }

  def createExternalId(userId:Long, purposeId:Long, creator:String): String ={
    userId.toString+"-"+purposeId.toString+"-"+creator
  }

  def getGroupANDPurposeFromOrderType(orderType:String, subOrderType:String):(Long, Long) = {
    var assigneeGroup:Long = ZENDESK_GROUP_SUPPORT
    var tktPurpose:Long = 0L
    if(orderType.toLowerCase()=="p"){
      assigneeGroup = ZENDESK_GROUP_PURCHASE
      if(subOrderType.toLowerCase()=="sip"){
        assigneeGroup = ZENDESK_GROUP_SYSTEMATIC_INVESTMENT
        tktPurpose = TKT_PURPOSE_SIP
      }else{
        assigneeGroup = ZENDESK_GROUP_PURCHASE
        tktPurpose = TKT_PURPOSE_BUY
      }
    } else{
      assigneeGroup = ZENDESK_GROUP_REDEMPTION
      tktPurpose = TKT_PURPOSE_SELL
    }
    (assigneeGroup, tktPurpose)
  }

  def getUserIdByEmail(email:String):Long = {
    var userId:Long = 0L
    if (email != null && email.length!=0) {
      var emailId = email.trim()
      var user = zendesk.lookupUserByEmail(emailId)
      var userIter = user.iterator()
      while(userIter.hasNext){
        userId = userIter.next.getId
      }
    }
    userId
  }

  def createUpload(file: File, contentType : String, bytes: Array[Byte]): Option[String] ={
    try{
      val token = zendesk.createUpload(file.getName, contentType, bytes).getToken
      Some(token)
    }catch {
      case ex : Exception =>{
        logger.error("error in file upload createUpload() " + ex.getMessage)
        None
      }
    }
  }
}
