package service

import javax.inject.Inject

import constants.MongoConstants
import controllers.JWTController
import data.model.Tables.FcubdRow
import helpers.UserHelper
import models.JsonFormats._
import models._
import org.slf4j.LoggerFactory
import play.api.mvc.Request
import reactivemongo.bson.BSONDocument
import repository.module.UserRepository
import repository.tables.FcultRepo

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.Future

/**
  * @author fincash
  *
  */
class UserService @Inject()(fcultRepo: FcultRepo, jwtController: JWTController, userRepository: UserRepository, userHelper: UserHelper,mongoDbService: MongoDbService) extends MongoConstants{

  val logger, log = LoggerFactory.getLogger(classOf[UserService])

  def collection(name: String) =  mongoDbService.collection(name)

  def postUserDataToDb() = { }



  def getUsernameFromRequest(request: Request[Any]): Future[Option[String]] = {
    getUserObjectFromReq(request).map(value =>{
      if(value.nonEmpty){
        value.get.userName
      }else{
        None
      }
    })
  }

  def getUseridFromRequest(request: Request[Any]): Future[Option[Long]] = {
    getUserObjectFromReq(request).map(value =>{
      if(value.nonEmpty){
        value.get.userId
      }else{
        None
      }
    })
  }

  def getUserObjectFromReq(request: Request[Any]):Future[Option[UserLoginObject]] = {
    var token = getTokenFromRequest(request);
    val findquery = BSONDocument("token" -> token);
    //var username = "";
    collection(TOKEN_COLLECTION_NAME).flatMap { coll =>
      coll.find(findquery)
        .one[BSONDocument].map { doc =>
        if (doc.nonEmpty) {
          val document = doc.get
          val userName = document.getAs[String]("username").get
          val token = document.getAs[String]("token").get
          val userId = document.getAs[Long]("userid").get
          val key = document.getAs[String]("key").get
          val foliocount = document.getAs[Long]("foliocount").get
          Some(UserLoginObject(Some(userName),Some(token),Some(userId),Some(key),Some(foliocount)))
          //username
        } else {
          None
        }
      }
    }
  }

  def getTokenFromRequest(request: Request[Any]): String = {
    val requestHeaders = request.headers.get("Authorization").map { authHeader =>
      var token = authHeader.replaceFirst("Bearer ", "");
      return token;
    }
    return null;
  }

  /**
    * This method is used to create a new user
    *
    * @param data
    * @return
    */
  def findUserByUsername(username: String) /*: Future[Seq[User]]*/ = {
    //    userDao.findByUsername(username)
  }

  def getUserByUserName(userName: String): Future[FcubdRow] = {
    userRepository.getUserByUsername(userName)
  }

  def getUserNomineeDetails(userName:String):Future[Option[String]] = {
      userRepository.getUserNomineeDetails(userName).map(nomineeList =>{
        val nomineeFutureList = for(nominee <- nomineeList) yield{
          userHelper.getNomineeLabel(nominee._1,nominee._2)
        }
        nomineeFutureList.headOption
      })
  }

  def getUserBankDetails(userName:String):Future[List[String]] = {
    userRepository.getUserBankDetails(userName).map(banksList =>{
      for(bank <- banksList) yield{
        bank.bmtbankname
      }
    })
  }

  def saveOTPDetails(userId:Long,otp:String,gatewayId:String,purpose:String):Future[Long] = {
    userRepository.saveOTPDetails(userId,otp,gatewayId,purpose)
  }

  def updateOTPMessageId(messageId:String,otprfnum:Long,userName:String):Future[Int] = {
    userRepository.updateOTPMessageId(messageId,otprfnum,userName)
  }

  def validateOTP(otp:String,purpose:String,userId:Long):Future[Int] = {
    userRepository.validateOTP(otp,purpose,userId).map(valuesList =>{
      if(valuesList.isEmpty){
        0
      } else{
        1
      }
    })
  }

  def updateOTPStatus(messageId:String,status:String):Future[Int] = {
    userRepository.updateOTPStatus(messageId,status)
  }

  def getMessageStatus(messageId:String):Future[String] = {
    userRepository.getMessageStatus(messageId)
  }
}